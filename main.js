!function(){"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,n){for(var r=0;r<n.length;r++){var o=n[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,n){if("object"!==t(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}var n=function(){function t(e,n,r,o,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._link=e.link,this._cardSelector=n,this._handleDeleteClick=o,this._handleLikeIcon=i,this._handleImageClick=r}var n,r;return n=t,(r=[{key:"_setEventListeners",value:function(){var t=this;this._cardElement.querySelector("card__button-remove").addEventListener("click",(function(){t._handleDeleteClick()})),this._cardElement.querySelector("card__like-button").addEventListener("click",(function(){t._handleLikeIcon()})),this._cardElement.querySelector(".card__image").addEventListener("click",(function(){t._handleImageClick({name:t._name,link:t._link})}))}},{key:"_handleLike",value:function(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}},{key:"_handleDelete",value:function(){this._cardElement.remove(),this._cardElement=null}},{key:"getView",value:function(){var t={link:this._link,name:this._name};this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);var e=this._cardElement.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._cardElement.querySelector(".card__label-title").textContent=t.name,this._setEventListeners(),this._cardElement}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function i(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var a=function(){function t(e,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._inputSelector=n.inputSelector,this._submitButtonSelector=n.submitButtonSelector,this._inactiveButtonClass=n.inactiveButtonClass,this._inputErrorClass=n.inputErrorClass,this._errorClass=n.errorClass,this._formEl=e,this._inputEls=function(t){if(Array.isArray(t))return o(t)}(r=this._formEl.querySelectorAll("modal__input"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._submitButtons=this._formEl.querySelector(this._submitButtonSelector)}var e,n;return e=t,(n=[{key:"_checkInputValidity",value:function(t){if(!t.validity.valid)return this._showInputError(t);this._hideInputError(t)}},{key:"_showInputError",value:function(t){var e=this._formEl.querySelector("#".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t){var e=this._formEl.querySelector("#".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}},{key:"_hasInvalidInput",value:function(t){return!t.every((function(t){return t.validity.valid}))}},{key:"toggleButtonState",value:function(){if(this._hasInvalidInput(this._inputEls))return this._submitButtons.classList.add(this._inactiveButtonClass),void(this._submitButtons.disabled=!0);this._submitButtons.classList.remove(this._inactiveButtonClass),this._submitButtons.disabled=!1}},{key:"_setEventListeners",value:function(){var t=this;this._inputEls.forEach((function(e){e.addEventListener("input",(function(n){t._checkInputValidity(e),t.toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._formEl.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}}])&&i(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),u=a;function l(t){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l(t)}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==l(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==l(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===l(o)?o:String(o)),r)}var o}var s=function(){function t(e,n){var r=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var e,n;return e=t,(n=[{key:"renderItems",value:function(){var t=this;this._items.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&c(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,d(r.key),r)}}function d(t){var e=function(t,e){if("object"!==f(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===f(e)?e:String(e)}var y=function(){function t(e){var n,r,o,i=this,a=e.popupSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o=function(t){"Escape"===t.key&&i.close()},(r=d(r="_handleEscClose"))in n?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,this._popupElement=document.querySelector(a)}var e,n;return e=t,(n=[{key:"open",value:function(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var t=this;this._popupElement.addEventListener("click",(function(e){(e.target===t._popupElement||e.target.classList.contains("modal__close"))&&t.close()}))}}])&&p(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==m(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==m(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===m(o)?o:String(o)),r)}var o}function v(){return v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},v.apply(this,arguments)}function b(t,e){return b=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},b(t,e)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var g=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&b(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_(r);if(o){var n=_(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===m(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,{popupSelector:t}))._popupImage=e._popupElement.querySelector(".modal__image"),e._popupTitle=e._popupElement.querySelector(".modal__preview-title"),e}return e=a,(n=[{key:"open",value:function(t,e){this._popupImage.src=t,this._popupImage.alt=e,this._popupTitle.textContent=e,v(_(a.prototype),"open",this).call(this)}}])&&h(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),a}(y);function S(t){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},S(t)}function w(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function E(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==S(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==S(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===S(o)?o:String(o)),r)}var o}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=C(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},k.apply(this,arguments)}function j(t,e){return j=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},j(t,e)}function C(t){return C=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},C(t)}var O=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&j(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=C(r);if(o){var n=C(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===S(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t,e){var n,r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,{popupSelector:t}))._handleFormSubmit=e,n._popupForm=n._popupElement.querySelector(".modal__form"),n._inputEls=function(t){if(Array.isArray(t))return w(t)}(r=n._popupForm.querySelectorAll(".modal__input"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return w(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?w(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),n}return e=a,(n=[{key:"close",value:function(){this._popupForm.reset(),k(C(a.prototype),"close",this).call(this)}},{key:"_getInputValues",value:function(){var t={};return inputs.forEach((function(e){return t[e.name]=e.value})),t}},{key:"setEventListeners",value:function(){var t=this;this._popupForm.addEventListener("submit",(function(e){e.preventDefault(),t._handleFormSubmit(t._getInputValues())})),k(C(a.prototype),"setEventListeners",this).call(this)}},{key:"getForm",value:function(){return this._popupForm}}])&&E(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),a}(y);function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}function I(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==P(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==P(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===P(o)?o:String(o)),r)}var o}var L=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._titleEl=document.querySelector(e),this._descriptionEl=document.querySelector(n),this._avatarEl=document.querySelector(r)}var e,n;return e=t,(n=[{key:"getUserInfo",value:function(){return{title:this._titleEl.textContent,description:this._descriptionEl.textContent}}},{key:"setUserInfo",value:function(t,e){this._titleEl.textContent=t,this._descriptionEl.textContent=e}},{key:"setAvatar",value:function(t){this._avatarEl.src=t}}])&&I(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function B(t){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},B(t)}function q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==B(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==B(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===B(o)?o:String(o)),r)}var o}var T=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl="https://around-api.en.tripleten-services.com/v1",this._headers={authorization:"f00dbe4d-3bcf-40e3-a46f-9e1ed8206bd5","Content-type":"application/json"}}var e,n;return e=t,(n=[{key:"_getResponse",value:function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}},{key:"getEditProfile",value:function(t,e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:e})}).then(this._checkResponse)}},{key:"getNewCard",value:function(t,e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:e})})}},{key:"deleteCard",value:function(t){return fetch("".concat(this._baseUrl,"/cards/").concat(t),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}},{key:"changeAvatar",value:function(t){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatarUrl:t})}).then(this._checkResponse)}},{key:"updateLike",value:function(t,e){return fetch("".concat(this._baseUrl,"/cards/").concat(t,"/likes"),{method:e?"DELETE":"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"updateAvatar",value:function(t){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._checkResponse)}}])&&q(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),A={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},R={profileEditButton:document.querySelector("#profile-edit-button"),profileEditModal:document.querySelector("#profile-edit-modal"),profileTitleInput:document.querySelector("#profile-title-input"),profileDescriptionInput:document.querySelector("#profile-description-input"),profileImage:document.querySelector(".profile__image"),addNewModalCard:document.querySelector("#add-card-modal"),cardListEl:document.querySelector(".cards__list"),addNewCardButton:document.querySelector(".profile__plus-button"),deleteModal:document.querySelector("#delete-modal"),avatarInput:document.querySelector("#avatar-url-input"),avatarModal:document.querySelector("#avatar-modal"),avatarModalButton:document.querySelector("#avatar-modal-button")},U=new T({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f00dbe4d-3bcf-40e3-a46f-9e1ed8206bd5","Content-Type":"application/json"}}),M=new u(R.addNewModalCard,A);M.enableValidation();var N=new u(R.profileEditModal.querySelector(".modal__form"),A),D=new L(".profile__title",".profile__description"),x=new s({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg",alt:"Yosemite Valley"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg",alt:"Lake Louise"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg",alt:"Bald Mountains"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg",alt:"Latemar"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg ",alt:"Vanoise National Park"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg  ",alt:"Lago di Braies"}],renderer:function(t){var e=Q(t);x.addItem(e)}},".cards__list"),V=new O("#profile-edit-modal",(function(t){D.setUserInfo(t.title,t.description),V.close()})),z=new O("#avatar-modal",(function(t){Y(R.avatarModalButton,"Saving..."),U.updateAvatar(t.link).then((function(t){D.setAvatar(t.avatar),console.log(t),z.close()})).catch(console.error).finally((function(){Y(R.avatarModalButton,"Save")}))}));z.setEventListeners(),R.profileImage.addEventListener("click",(function(){z.open()}));var F=new g("#modal-preview");F.setEventListeners();var J,H=new O("#add-card-modal",(function(t){Y(R.addNewCardButton,"Saving..."),U.addNewCard(t).then((function(t){console.log(t),Q(t),R.addNewModalCard.reset(),M.toggleButtonState(),H.close()})).catch(console.error).finally((function(){Y(R.addNewCardButton,"Save")}))}));function Y(t,e){t.textContent=e}function $(t){F.open(t)}function G(t){deleteModal.open(),deleteModal.setSubmitAction((function(){U.deleteCard(t._id).then((function(){deleteModal.close(),t.handleDelete()})).catch(console.error)}))}function K(t){U.updateLike(t._id,t.isLiked()).then((function(){t.handleLike(),console.log(t)})).catch(console.error)}function Q(t){var e=new n(t,"#card-template",$,G,K);J.addItem(e.getView())}x.renderItems(),N.enableValidation(),U.getUserInfo().then((function(t){D.getUserInfo(t.name,t.about)})),U.getInitialCards().then((function(t){t.forEach((function(t){var e=generateCard(t);x.addItem(e)}))})),U.getInitialCards().then((function(t){(J=new s({items:t,renderer:function(t){Q(t)}},"gallery__cards")).renderItems(),console.log(t)})).catch(console.error),U.getUserInfo().then((function(t){console.log(t),D.setUserInfo(t.name,t.about),D.setAvatar(t.avatar)})).catch(console.error),profileEditButton.addEventListener("click",(function(){var t=D.getUserInfo();profileTitleInput.value=t.title,profileDescriptionInput.value=t.description,V.open()})),H.setEventListeners(),V.setEventListeners(),R.addNewCardButton.addEventListener("click",(function(){M.toggleButtonState(),H.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,