!function(){"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,r){for(var n=0;n<r.length;n++){var o=r[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,r){if("object"!==t(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}var r=function(){function t(e,r,n,o,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._link=e.link,this._cardSelector=r,this._handleDeleteClick=o,this._handleLikeIcon=i,this._handleImageClick=n}var r,n;return r=t,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}},{key:"_setEventListeners",value:function(){var t=this;this._cardElement.querySelector("card__button-remove").addEventListener("click",(function(){t._handleDeleteClick()})),this._cardElement.querySelector("card__like-button").addEventListener("click",(function(){t._handleLikeIcon()})),this._cardElement.querySelector(".card__image").addEventListener("click",(function(){t._handleImageClick({name:t._name,link:t._link})}))}},{key:"_handleLike",value:function(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}},{key:"_handleDelete",value:function(){this._cardElement.remove(),this._cardElement=null}},{key:"getView",value:function(){var t={link:this._link,name:this._name};this._cardElement=this._getTemplate;var e=this._cardElement.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._cardElement.querySelector(".card__label-title").textContent=t.name,this._setEventListeners(),this._cardElement}}])&&e(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}();function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===n(i)?i:String(i)),o)}var i}var a=function(){function t(e,r){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._inputSelector=r.inputSelector,this._submitButtonSelector=r.submitButtonSelector,this._inactiveButtonClass=r.inactiveButtonClass,this._inputErrorClass=r.inputErrorClass,this._errorClass=r.errorClass,this._formEl=e,this._inputEls=function(t){if(Array.isArray(t))return o(t)}(n=this._formEl.querySelectorAll("modal__input"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(n)||function(t,e){if(t){if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._submitButtons=this._formEl.querySelector(this._submitButtonSelector)}var e,r;return e=t,(r=[{key:"_checkInputValidity",value:function(t){if(!t.validity.valid)return this._showInputError(t);this._hideInputError(t)}},{key:"_showInputError",value:function(t){var e=this._formEl.querySelector("#".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t){var e=this._formEl.querySelector("#".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}},{key:"_hasInvalidInput",value:function(t){return!t.every((function(t){return t.validity.valid}))}},{key:"toggleButtonState",value:function(){if(this._hasInvalidInput(this._inputEls))return this._submitButtons.classList.add(this._inactiveButtonClass),void(this._submitButtons.disabled=!0);this._submitButtons.classList.remove(this._inactiveButtonClass),this._submitButtons.disabled=!1}},{key:"_setEventListeners",value:function(){var t=this;this._inputEls.forEach((function(e){e.addEventListener("input",(function(r){t._checkInputValidity(e),t.toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._formEl.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}}])&&i(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),u=a;function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==c(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===c(o)?o:String(o)),n)}var o}var s=function(){function t(e,r){var n=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=n,this._renderer=o,this._container=document.querySelector(r)}var e,r;return e=t,(r=[{key:"renderItems",value:function(){var t=this;this._items.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&l(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,y(n.key),n)}}function y(t){var e=function(t,e){if("object"!==f(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==f(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===f(e)?e:String(e)}var d=function(){function t(e){var r,n,o,i=this,a=e.popupSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=function(t){"Escape"===t.key&&i.close()},(n=y(n="_handleEscClose"))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this._popupElement=document.querySelector(a)}var e,r;return e=t,(r=[{key:"open",value:function(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var t=this;this._popupElement.addEventListener("click",(function(e){(e.target===t._popupElement||e.target.classList.contains("modal__close"))&&t.close()}))}}])&&p(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==m(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==m(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===m(o)?o:String(o)),n)}var o}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},h.apply(this,arguments)}function b(t,e){return b=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},b(t,e)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var S=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&b(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_(n);if(o){var r=_(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===m(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,{popupSelector:t}))._popupImage=e._popupElement.querySelector(".modal__image"),e._popupTitle=e._popupElement.querySelector(".modal__preview-title"),e}return e=a,(r=[{key:"open",value:function(t,e){this._popupImage.src=t,this._popupImage.alt=e,this._popupTitle.textContent=e,h(_(a.prototype),"open",this).call(this)}}])&&v(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(d);function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function w(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function E(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==g(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==g(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===g(o)?o:String(o)),n)}var o}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=O(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},k.apply(this,arguments)}function j(t,e){return j=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},j(t,e)}function O(t){return O=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},O(t)}var P=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&j(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=O(n);if(o){var r=O(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===g(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t,e){var r,n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,{popupSelector:t}))._handleFormSubmit=e,r._popupForm=r._popupElement.querySelector(".modal__form"),r._inputEls=function(t){if(Array.isArray(t))return w(t)}(n=r._popupForm.querySelectorAll(".modal__input"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(n)||function(t,e){if(t){if("string"==typeof t)return w(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?w(t,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r}return e=a,(r=[{key:"close",value:function(){this._popupForm.reset(),k(O(a.prototype),"close",this).call(this)}},{key:"_getInputValues",value:function(){var t={};return inputs.forEach((function(e){return t[e.name]=e.value})),t}},{key:"setEventListeners",value:function(){var t=this;this._popupForm.addEventListener("submit",(function(e){e.preventDefault(),t._handleFormSubmit(t._getInputValues())})),k(O(a.prototype),"setEventListeners",this).call(this)}},{key:"getForm",value:function(){return this._popupForm}}])&&E(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(d);function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function L(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==C(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==C(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===C(o)?o:String(o)),n)}var o}function T(){return T="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=B(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},T.apply(this,arguments)}function I(t,e){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},I(t,e)}function B(t){return B=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},B(t)}var R=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&I(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=B(n);if(o){var r=B(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===C(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,{popupSelector:t}))._formEl=e._popupElement.querySelector(".modal__form"),e}return e=a,(r=[{key:"setEventListeners",value:function(){var t=this;this._formEl.addEventListener("submit",(function(e){e.preventDefault(),t._handleFormSubmit()})),T(B(a.prototype),"setEventListeners",this).call(this)}},{key:"setSubmitAction",value:function(t){this._handleFormSubmit=t}}])&&L(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(d);function q(t){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},q(t)}function A(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==q(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==q(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===q(o)?o:String(o)),n)}var o}var U=function(){function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._titleEl=document.querySelector(e),this._descriptionEl=document.querySelector(r),this._avatarEl=document.querySelector(n)}var e,r;return e=t,(r=[{key:"getUserInfo",value:function(){return{title:this._titleEl.textContent,description:this._descriptionEl.textContent}}},{key:"setUserInfo",value:function(t,e){this._titleEl.textContent=t,this._descriptionEl.textContent=e}},{key:"setAvatar",value:function(t){this._avatarEl.src=t}}])&&A(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function x(t){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},x(t)}function D(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==x(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==x(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===x(o)?o:String(o)),n)}var o}var N=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl="https://around-api.en.tripleten-services.com/v1",this._headers={authorization:"f00dbe4d-3bcf-40e3-a46f-9e1ed8206bd5","Content-type":"application/json"}}var e,r;return e=t,(r=[{key:"_getResponse",value:function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}},{key:"getEditProfile",value:function(t,e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:e})}).then(this._checkResponse)}},{key:"getNewCard",value:function(t,e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:e})})}},{key:"deleteCard",value:function(t){return fetch("".concat(this._baseUrl,"/cards/").concat(t),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}},{key:"changeAvatar",value:function(t){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatarUrl:t})}).then(this._checkResponse)}},{key:"updateLike",value:function(t,e){return fetch("".concat(this._baseUrl,"/cards/").concat(t,"/likes"),{method:e?"DELETE":"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"updateAvatar",value:function(t){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._checkResponse)}}])&&D(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),M={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},V={profileEditButton:document.querySelector("#profile-edit-button"),profileEditModal:document.querySelector("#profile-edit-modal"),profileTitleInput:document.querySelector("#profile-title-input"),profileDescriptionInput:document.querySelector("#profile-description-input"),profileImage:document.querySelector(".profile__image"),addNewModalCard:document.querySelector("#add-card-modal"),cardListEl:document.querySelector(".cards__list"),addNewCardButton:document.querySelector(".profile__plus-button"),deleteModal:document.querySelector("#delete-modal"),avatarInput:document.querySelector("#avatar-url-input"),avatarModal:document.querySelector("#avatar-modal"),avatarModalButton:document.querySelector("#avatar-modal-button")},F=new N({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f00dbe4d-3bcf-40e3-a46f-9e1ed8206bd5","Content-Type":"application/json"}}),z=new U(".profile__title",".profile__description",".profile__image"),J=new u(V.addNewModalCard,M);J.enableValidation();var H=new u(V.profileEditModal.querySelector(".modal__form"),M),Y=new s({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg",alt:"Yosemite Valley"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg",alt:"Lake Louise"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg",alt:"Bald Mountains"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg",alt:"Latemar"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg ",alt:"Vanoise National Park"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg  ",alt:"Lago di Braies"}],renderer:function(t){var e=G(t);Y.addItem(e)}},".cards__list"),$=new P("#avatar-modal",(function(t){setButtonText(V.avatarModalButton,"Saving..."),F.updateAvatar(t.link).then((function(t){z.setAvatar(t.avatar),console.log(t),$.close()})).catch(console.error).finally((function(){setButtonText(V.avatarModalButton,"Save")}))}));function G(t){var e=new r(t,"#card-template",Z,tt,et);undefined.addItem(e.getView())}$.setEventListeners(),V.profileImage.addEventListener("click",(function(){$.open()})),V.addNewCardButton.addEventListener("click",(function(){W.open()})),V.profileEditButton.addEventListener("click",(function(){var t=z.getUserInfo();profileTitleInput.value=t.title,profileDescriptionInput.value=t.description,X.open()}));var K=new S("#modal-preview");K.setEventListeners();var Q=new R("#delete-modal");Q.setEventListeners();var W=new P("#add-card-modal",(function(t){setButtonText(V.addNewCardButton,"Saving..."),F.addNewCard(t).then((function(t){G(t),V.addNewModalCard.reset(),J.toggleButtonState(),W.close()})).catch(console.error).finally((function(){setButtonText(V.addNewCardButton,"Save")}))}));W.setEventListeners();var X=new P("#profile-edit-modal",(function(t){z.setUserInfo(t.title,t.description),X.close()}));function Z(t){K.open(t)}function tt(t){Q.open(),Q.setSubmitAction((function(){F.deleteCard(t._id).then((function(){Q.close(),t.handleDelete()})).catch(console.error)}))}function et(t){F.updateLike(t._id,t.isLiked()).then((function(){t.handleLike(),console.log(t)})).catch(console.error)}X.setEventListeners(),Y.renderItems(),H.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixRQUFRQyxJQUFJSSxFQUNkLElBQ0NILE1BQU1GLFFBQVFHLE1BQ25CLENBL0JBVyxFQUFxQkwsb0JBc0VyQmYsRUFBWStCLGNBR1poQyxFQUFrQkQsa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvcGFnZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgY2FyZERhdGEsIFxyXG4gICAgICBjYXJkU2VsZWN0b3IsIFxyXG4gICAgICBoYW5kbGVJbWFnZUNsaWNrLCBcclxuICAgICAgaGFuZGxlRGVsZXRlQ2xpY2ssIFxyXG4gICAgICBoYW5kbGVMaWtlSWNvblxyXG4gICAgICApIFxyXG4gICAgICBcclxuICAgICAge1xyXG4gICAgICB0aGlzLl9uYW1lID0gY2FyZERhdGEubmFtZTtcclxuICAgICAgdGhpcy5fbGluayA9IGNhcmREYXRhLmxpbms7XHJcbiAgICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljaztcclxuICAgICAgdGhpcy5faGFuZGxlTGlrZUljb24gPSBoYW5kbGVMaWtlSWNvbjtcclxuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxyXG4gICAgICAgIC5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkLmNsb25lTm9kZSh0cnVlKTtcclxuICBcclxuICAgICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gICAgfVxyXG4gIFxyXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICB0aGlzLl9jYXJkRWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcImNhcmRfX2J1dHRvbi1yZW1vdmVcIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2soKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLl9jYXJkRWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcImNhcmRfX2xpa2UtYnV0dG9uXCIpXHJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUxpa2VJY29uKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh7IG5hbWU6IHRoaXMuX25hbWUsIGxpbms6IHRoaXMuX2xpbmsgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgX2hhbmRsZUxpa2UoKSB7XHJcbiAgICAgIHRoaXMuX2NhcmRFbGVtZW50XHJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgICAuY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIH1cclxuICBcclxuICAgIF9oYW5kbGVEZWxldGUoKSB7XHJcbiAgICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBnZXRWaWV3KCkge1xyXG4gICAgICBjb25zdCBjYXJkRGF0YSA9IHsgbGluazogdGhpcy5fbGluaywgbmFtZTogdGhpcy5fbmFtZSB9O1xyXG4gIFxyXG4gICAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlO1xyXG4gIFxyXG4gICAgICBjb25zdCBjYXJkSW1hZ2VFTCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICAgIGNhcmRJbWFnZUVMLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICAgIGNhcmRJbWFnZUVMLmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgXHJcbiAgICAgIGNvbnN0IGNhcmRUaXRsZUVMID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19sYWJlbC10aXRsZVwiKTtcclxuICAgICAgY2FyZFRpdGxlRUwudGV4dENvbnRlbnQgPSBjYXJkRGF0YS5uYW1lO1xyXG4gIFxyXG4gICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIFxyXG4gICAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgfSIsImNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoIGZvcm1TZWxlY3RvciwgdmFsaWRhdGlvblNldHRpbmdzICkge1xyXG4gICAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gdmFsaWRhdGlvblNldHRpbmdzLmlucHV0U2VsZWN0b3I7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gdmFsaWRhdGlvblNldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xyXG4gICAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gdmFsaWRhdGlvblNldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHZhbGlkYXRpb25TZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3M7XHJcbiAgICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSB2YWxpZGF0aW9uU2V0dGluZ3MuZXJyb3JDbGFzcztcclxuICAgICAgdGhpcy5fZm9ybUVsID0gZm9ybVNlbGVjdG9yO1xyXG4gICAgICB0aGlzLl9pbnB1dEVscyA9IFsuLi50aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvckFsbChcIm1vZGFsX19pbnB1dFwiKV07XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbnMgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWwpIHtcclxuICAgICAgaWYgKCFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgX3Nob3dJbnB1dEVycm9yKGlucHV0KSB7XHJcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0LmlkfS1lcnJvcmApO1xyXG4gICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICAgIGVycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gaW5wdXQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICAgIGVycm9yTWVzc2FnZUVsLmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBfaGlkZUlucHV0RXJyb3IoaW5wdXQpIHtcclxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlRWwgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXQuaWR9LWVycm9yYCk7XHJcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgICAgZXJyb3JNZXNzYWdlRWwudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgICBlcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgX2hhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpIHtcclxuICAgICAgcmV0dXJuICFpbnB1dExpc3QuZXZlcnkoKGlucHV0RWwpID0+IGlucHV0RWwudmFsaWRpdHkudmFsaWQpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQodGhpcy5faW5wdXRFbHMpKSB7XHJcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9ucy5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbnMuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b25zLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbnMuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgdGhpcy5faW5wdXRFbHMuZm9yRWFjaCgoaW5wdXRFbCkgPT4ge1xyXG4gICAgICAgIGlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCk7XHJcbiAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgICAgdGhpcy5fZm9ybUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG4gIH1cclxuICBleHBvcnQgZGVmYXVsdCBGb3JtVmFsaWRhdG9yO1xyXG5cclxuIiwiY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJdGVtcygpIHtcclxuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWN0aW9uOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSAge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIH0gXHJcbiAgICBcclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgLy9vcGVuIHBvcHVwc1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICAvL2Nsb3NlIHBvcHVwc1xyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIF9oYW5kbGVFc2NDbG9zZSA9IChlKSA9PiB7XHJcbiAgICAgICAgLy9saXN0ZW5zIGZvciBlc2MgYnV0dG9uXHJcbiAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgfSAgICAgIFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKXtcclxuICAgICAgICAvL3NldHMgbGlzdGVuZXJzXHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKFxyXG4gICAgICAgICAgICAgICAgZXZ0LnRhcmdldCA9PT0gdGhpcy5fcG9wdXBFbGVtZW50IHx8IGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2Nsb3NlXCIpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgICAgICB0aGlzLl9wb3B1cEltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwVGl0bGUgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fcHJldmlldy10aXRsZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKCBsaW5rLCBuYW1lICl7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBsaW5rO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9wb3B1cFRpdGxlLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3RvciAocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgICAgICB0aGlzLl9wb3B1cEZvcm0gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKVxyXG4gICAgICAgIHRoaXMuX2lucHV0RWxzID0gWy4uLnRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19pbnB1dFwiKV07XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBGb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICAgICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgICAgICBpbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IFxyXG4gICAgICAgICAgICAoaW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKXtcclxuICAgICAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Rm9ybSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cEZvcm07XHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRGVsZXRlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX2Zvcm1FbCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9mb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQoKTtcclxuICAgIH0pO1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIHNldFN1Ym1pdEFjdGlvbihoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFVzZXJJbmZvIHtcclxuICAgIGNvbnN0cnVjdG9yKHRpdGxlU2VsZWN0b3IsIGRlc2NyaXB0aW9uU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGl0bGVTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb25FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGVzY3JpcHRpb25TZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fYXZhdGFyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhclNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VySW5mbygpIHtcclxuICAgICAgICBjb25zdCB1c2VySW5mbyA9IHtcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuX3RpdGxlRWwudGV4dENvbnRlbnQsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLl9kZXNjcmlwdGlvbkVsLnRleHRDb250ZW50LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHVzZXJJbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFVzZXJJbmZvKHRpdGxlLCBkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMuX3RpdGxlRWwudGV4dENvbnRlbnQgPSB0aXRsZTtcclxuICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbkVsLnRleHRDb250ZW50ID0gZGVzY3JpcHRpb247XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QXZhdGFyKGF2YXRhcikge1xyXG4gICAgICAgIHRoaXMuX2F2YXRhckVsLnNyYyA9IGF2YXRhcjtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVzZXJJbmZvOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IHtcclxuICAgICAgYXV0aG9yaXphdGlvbjogXCJmMDBkYmU0ZC0zYmNmLTQwZTMtYTQ2Zi05ZTFlZDgyMDZiZDVcIixcclxuICAgICAgXCJDb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgX2dldFJlc3BvbnNlKHJlcykge1xyXG4gICAgaWYgKHJlcy5vaykge1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICB9XHJcblxyXG4gIC8vIDEgTE9BRElORyBVU0VSIElORk9STUFUSU9OIElOVE8gVEhFIFNFUlZFUlxyXG4gIC8vIEdFVCBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS91c2Vycy9tZSBcclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICAvLyAyIExPQURJTkcgQ0FSRFMgRlJPTSBUSEUgU0VSVkVSXHJcbiAgLy8gR0VUIGh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxL2NhcmRzIFxyXG4gIC8vIGluaXRpYWwgcmVzcG9uc2Ugd2lsbCBiZSBhbiBlbXB0eSBKU09OIGFycmF5IFtdXHJcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIC8vIDMgIEVESVRJTkcgVEhFIFBST0ZJTEUgXHJcbiAgLy8gIFBBVENIIGh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxL3VzZXJzL21lIFxyXG4gIC8vIEFkZCBDb250ZW50LXR5cGUgYWZ0ZXIgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gXHJcbiAgLy8gYm9keTogSlNPTi5zdHJpbmdpZnkgKHtOQU1FIGFuZCBBQk9VVH0pIFxyXG4gIGdldEVkaXRQcm9maWxlKG5hbWUsIGFib3V0KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZSwgXHJcbiAgICAgICAgYWJvdXQ6IGFib3V0XHJcbiAgICAgIH0pXHJcbiAgICAgIFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcbiAgLy8gNCBBRERJTkcgQSBORVcgQ0FSRFxyXG4gIC8vIFBPU1QgaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjEvY2FyZHNcclxuICAvLyBib2R5OiBKU09OLnN0cmluZ2lmeSAoe05BTUUgYW5kIExJTkt9KVxyXG4gIGdldE5ld0NhcmQobmFtZSwgbGluaykge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSAoe1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgbGluazogbGlua1xyXG4gICAgICB9KVxyXG4gICAgfSlcclxuXHJcbn1cclxuXHJcbi8vIDUgJiA2IENSRUFUSU5HIEEgTkVXIFBPUFVQIEZPUiBERUxFVElORyBBIENBUkRcclxuICAvLyBzZW5kIERFTEVURSByZXF1ZXN0IFxyXG4gICAgLy8gREVMRVRFIGh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxL2NhcmRzL2NhcmRJZCBcclxuICAgIGRlbGV0ZUNhcmQoY2FyZElkKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlQXZhdGFyKGF2YXRhclVybCkge1xyXG4gICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhdmF0YXJVcmw6IGF2YXRhclVybCB9KSxcclxuICAgICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVMaWtlKGNhcmRJZCwgaXNMaWtlZCkge1xyXG4gICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xyXG4gICAgICAgIG1ldGhvZDogaXNMaWtlZCA/IFwiREVMRVRFXCIgOiBcIlBVVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICB1cGRhdGVBdmF0YXIoYXZhdGFyKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICBhdmF0YXI6IGF2YXRhcixcclxuICAgICAgICB9KSxcclxuICAgICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICB9XHJcblxyXG4gIFxyXG5cclxuXHJcbiIsIiAgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXHJcbiAgICAgIGFsdDogXCJZb3NlbWl0ZSBWYWxsZXlcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiTGFrZSBMb3Vpc2VcIixcclxuICAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xha2UtbG91aXNlLmpwZ1wiLFxyXG4gICAgICBhbHQ6IFwiTGFrZSBMb3Vpc2VcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuICAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2JhbGQtbW91bnRhaW5zLmpwZ1wiLFxyXG4gICAgICBhbHQ6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcclxuICAgICAgYWx0OiBcIkxhdGVtYXJcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZyBcIixcclxuICAgICAgYWx0OiBcIlZhbm9pc2UgTmF0aW9uYWwgUGFya1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGcgIFwiLFxyXG4gICAgICBhbHQ6IFwiTGFnbyBkaSBCcmFpZXNcIixcclxuICAgIH0sXHJcbiAgXTtcclxuXHJcbiAgICBjb25zdCB2YWxpZGF0aW9uU2V0dGluZ3MgPSB7XHJcbiAgICAvLyBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcclxuICAgIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXHJcbiAgICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICAgIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4gICAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JcIlxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHZhcmlhYmxlcyA9IHtcclxuICAgICAgcHJvZmlsZUVkaXRCdXR0b246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1lZGl0LWJ1dHRvblwiKSxcclxuICAgICAgcHJvZmlsZUVkaXRNb2RhbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWVkaXQtbW9kYWxcIiksXHJcbiAgICAgIHByb2ZpbGVUaXRsZUlucHV0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtdGl0bGUtaW5wdXRcIiksXHJcbiAgICAgIHByb2ZpbGVEZXNjcmlwdGlvbklucHV0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZGVzY3JpcHRpb24taW5wdXRcIiksXHJcbiAgICAgIHByb2ZpbGVJbWFnZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZVwiKSxcclxuICAgICAgYWRkTmV3TW9kYWxDYXJkOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1jYXJkLW1vZGFsXCIpLFxyXG4gICAgICBjYXJkTGlzdEVsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19saXN0XCIpLFxyXG4gICAgICBhZGROZXdDYXJkQnV0dG9uOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3BsdXMtYnV0dG9uXCIpLFxyXG4gICAgICBkZWxldGVNb2RhbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkZWxldGUtbW9kYWxcIiksXHJcbiAgICAgIGF2YXRhcklucHV0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2F2YXRhci11cmwtaW5wdXRcIiksXHJcbiAgICAgIGF2YXRhck1vZGFsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2F2YXRhci1tb2RhbFwiKSxcclxuICAgICAgYXZhdGFyTW9kYWxCdXR0b246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXZhdGFyLW1vZGFsLWJ1dHRvblwiKSxcclxuICAgIFxyXG4gICAgfVxyXG5cclxuXHJcbmV4cG9ydCB7aW5pdGlhbENhcmRzLCB2YWxpZGF0aW9uU2V0dGluZ3MsIHZhcmlhYmxlc307IiwiaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aERlbGV0ZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhEZWxldGUuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcbmltcG9ydCB7XHJcbiAgaW5pdGlhbENhcmRzLCBcclxuICB2YWxpZGF0aW9uU2V0dGluZ3MsIFxyXG4gIHZhcmlhYmxlc30gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuXHJcblxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCJmMDBkYmU0ZC0zYmNmLTQwZTMtYTQ2Zi05ZTFlZDgyMDZiZDVcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbiAgfVxyXG59KTsgXHJcblxyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyhcclxuICBcIi5wcm9maWxlX190aXRsZVwiLFxyXG4gIFwiLnByb2ZpbGVfX2Rlc2NyaXB0aW9uXCIsXHJcbiAgXCIucHJvZmlsZV9faW1hZ2VcIlxyXG4pO1xyXG5cclxuLy8gYXBpXHJcbi8vICAgLmdldEluaXRpYWxDYXJkcygpXHJcbi8vICAgLnRoZW4oKHJlcykgPT4ge1xyXG4vLyAgICAgc2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxyXG4vLyAgICAgICB7XHJcbi8vICAgICAgICAgaXRlbXM6IHJlcyxcclxuLy8gICAgICAgICByZW5kZXJlcjogKGNhcmREYXRhKSA9PiB7XHJcbi8vICAgICAgICAgICBjcmVhdGVDYXJkKGNhcmREYXRhKTtcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgICBcImNhcmRzX19saXN0XCJcclxuLy8gICAgICk7XHJcbi8vICAgICBzZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4vLyAgIH0pXHJcbi8vICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG5cclxuLy8gYXBpXHJcbi8vICAgLmdldFVzZXJJbmZvKClcclxuLy8gICAudGhlbigocmVzKSA9PiB7XHJcbi8vICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4vLyAgICAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzLm5hbWUsIHJlcy5hYm91dCk7XHJcbi8vICAgICB1c2VySW5mby5zZXRBdmF0YXIocmVzLmF2YXRhcik7XHJcbi8vICAgfSlcclxuLy8gICAuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcblxyXG5jb25zdCBjYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhcmlhYmxlcy5hZGROZXdNb2RhbENhcmQsIHZhbGlkYXRpb25TZXR0aW5ncyk7XHJcbmNhcmRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbmNvbnN0IHByb2ZpbGVFZGl0Rm9ybSA9IHZhcmlhYmxlcy5wcm9maWxlRWRpdE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbmNvbnN0IGVkaXRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoXHJcbiAgcHJvZmlsZUVkaXRGb3JtLFxyXG4gIHZhbGlkYXRpb25TZXR0aW5nc1xyXG4pO1xyXG5cclxuY29uc3QgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICB7XHJcbiAgICBpdGVtczogaW5pdGlhbENhcmRzLFxyXG4gICAgcmVuZGVyZXI6IChjYXJkRGF0YSkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkTGlzdEVsID0gY3JlYXRlQ2FyZChjYXJkRGF0YSk7XHJcbiAgICAgIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY2FyZExpc3RFbCk7XHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgXCIuY2FyZHNfX2xpc3RcIlxyXG4pO1xyXG5cclxuLy8gY29uc3QgcHJvZmlsZUVkaXRGb3JtUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuLy8gICBcIiNwcm9maWxlLWVkaXQtbW9kYWxcIixcclxuLy8gICBoYW5kbGVQcm9maWxlRWRpdEZvcm1TdWJtaXRcclxuLy8gKTtcclxuXHJcbmNvbnN0IGF2YXRhck1vZGFsID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjYXZhdGFyLW1vZGFsXCIsXHJcbiAgaGFuZGxlQXZhdGFyRm9ybVN1Ym1pdFxyXG4pO1xyXG5hdmF0YXJNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gZnVuY3Rpb24gb3BlbkF2YXRhckZvcm0oKSB7XHJcbi8vICAgYXZhdGFyTW9kYWwub3BlbigpO1xyXG4vLyB9XHJcblxyXG4vLyB2YXJpYWJsZXMucHJvZmlsZUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbi8vICAgb3BlbkF2YXRhckZvcm0oKTtcclxuLy8gfSk7XHJcblxyXG4vLyBjb25zdCBwb3B1cFdpdGhJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNtb2RhbC1wcmV2aWV3XCIpO1xyXG4vLyBwb3B1cFdpdGhJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gY29uc3QgYWRkQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbi8vICAgXCIjYWRkLWNhcmQtbW9kYWxcIixcclxuLy8gICBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdFxyXG4vLyApO1xyXG5cclxuLy8gY29uc3QgZGVsZXRlTW9kYWwgPSBuZXcgUG9wdXBXaXRoRGVsZXRlKFwiI2RlbGV0ZS1tb2RhbFwiKTtcclxuLy8gZGVsZXRlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIGZ1bmN0aW9uIHNldEJ1dHRvblRleHQoYnV0dG9uLCB0ZXh0KSB7XHJcbi8vICAgYnV0dG9uLnRleHRDb250ZW50ID0gdGV4dDtcclxuLy8gfVxyXG5cclxuLy8gZnVuY3Rpb24gaGFuZGxlSW1hZ2VDbGljayhjYXJkRGF0YSkge1xyXG4vLyAgIHBvcHVwV2l0aEltYWdlLm9wZW4oY2FyZERhdGEpO1xyXG4vLyB9XHJcblxyXG4vLyBmdW5jdGlvbiBoYW5kbGVEZWxldGVDbGljayhjYXJkKSB7XHJcbi8vICAgLy8gb3BlbiB0aGUgbW9kYWxcclxuLy8gICBkZWxldGVNb2RhbC5vcGVuKCk7XHJcbi8vICAgLy8gc2V0IHRoZSBzdWJtaXQgYWN0aW9uXHJcbi8vICAgZGVsZXRlTW9kYWwuc2V0U3VibWl0QWN0aW9uKCgpID0+IHtcclxuLy8gICAgIGFwaVxyXG4vLyAgICAgICAuZGVsZXRlQ2FyZChjYXJkLl9pZClcclxuLy8gICAgICAgLnRoZW4oKCkgPT4ge1xyXG4vLyAgICAgICAgIGRlbGV0ZU1vZGFsLmNsb3NlKCk7XHJcbi8vICAgICAgICAgY2FyZC5oYW5kbGVEZWxldGUoKTtcclxuLy8gICAgICAgfSlcclxuLy8gICAgICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG4vLyAgIH0pO1xyXG4vLyB9XHJcblxyXG4vLyBmdW5jdGlvbiBoYW5kbGVMaWtlQ2xpY2soY2FyZCkge1xyXG4vLyAgIGFwaVxyXG4vLyAgICAgLnVwZGF0ZUxpa2UoY2FyZC5faWQsIGNhcmQuaXNMaWtlZCgpKVxyXG4vLyAgICAgLnRoZW4oKCkgPT4ge1xyXG4vLyAgICAgICBjYXJkLmhhbmRsZUxpa2UoKTtcclxuLy8gICAgICAgY29uc29sZS5sb2coY2FyZCk7XHJcbi8vICAgICB9KVxyXG4vLyAgICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG4vLyB9XHJcblxyXG4vLyBmdW5jdGlvbiBoYW5kbGVQcm9maWxlRWRpdEZvcm1TdWJtaXQoZm9ybURhdGEpIHtcclxuLy8gICB1c2VySW5mby5zZXRVc2VySW5mbyhmb3JtRGF0YS50aXRsZSwgZm9ybURhdGEuZGVzY3JpcHRpb24pO1xyXG4vLyAgIHByb2ZpbGVFZGl0Rm9ybVBvcHVwLmNsb3NlKCk7XHJcbi8vIH1cclxuXHJcbi8vIGNhcmRTZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcblxyXG4vLyBlZGl0Rm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vLyB2YXJpYWJsZXMucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuLy8gICBjb25zdCBwcm9maWxlVXNlckluZm8gPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4vLyAgIHByb2ZpbGVUaXRsZUlucHV0LnZhbHVlID0gcHJvZmlsZVVzZXJJbmZvLnRpdGxlO1xyXG4vLyAgIHByb2ZpbGVEZXNjcmlwdGlvbklucHV0LnZhbHVlID0gcHJvZmlsZVVzZXJJbmZvLmRlc2NyaXB0aW9uO1xyXG4vLyAgIHByb2ZpbGVFZGl0Rm9ybVBvcHVwLm9wZW4oKTtcclxuLy8gfSk7XHJcblxyXG4vLyBhZGRDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuLy8gcHJvZmlsZUVkaXRGb3JtUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIHZhcmlhYmxlcy5hZGROZXdDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbi8vICAgY2FyZEZvcm1WYWxpZGF0b3IudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuLy8gICBhZGRDYXJkUG9wdXAub3BlbigpO1xyXG4vLyB9KTtcclxuXHJcbi8vIENyZWF0ZSBhIG5ldyBjYXJkXHJcbmxldCBzZWN0aW9uO1xyXG5mdW5jdGlvbiBjcmVhdGVDYXJkKGNhcmREYXRhKSB7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxyXG4gICAgY2FyZERhdGEsXHJcbiAgICBcIiNjYXJkLXRlbXBsYXRlXCIsXHJcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxyXG4gICAgaGFuZGxlRGVsZXRlQ2xpY2ssXHJcbiAgICBoYW5kbGVMaWtlQ2xpY2tcclxuICApO1xyXG4gIHNlY3Rpb24uYWRkSXRlbShjYXJkLmdldFZpZXcoKSk7XHJcbn1cclxuXHJcbi8vIE9wZW4gdGhlIGF2YXRhciBmb3JtXHJcbmZ1bmN0aW9uIG9wZW5BdmF0YXJGb3JtKCkge1xyXG4gIGF2YXRhck1vZGFsLm9wZW4oKTtcclxufVxyXG5cclxuLy8gT3BlbiB0aGUgYWRkIGNhcmQgZm9ybVxyXG5mdW5jdGlvbiBvcGVuQWRkQ2FyZEZvcm0oKSB7XHJcbiAgYWRkQ2FyZFBvcHVwLm9wZW4oKTtcclxufVxyXG5cclxuLy8gT3BlbiB0aGUgcHJvZmlsZSBlZGl0IGZvcm1cclxuZnVuY3Rpb24gb3BlblByb2ZpbGVFZGl0Rm9ybSgpIHtcclxuICBjb25zdCBwcm9maWxlVXNlckluZm8gPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4gIHByb2ZpbGVUaXRsZUlucHV0LnZhbHVlID0gcHJvZmlsZVVzZXJJbmZvLnRpdGxlO1xyXG4gIHByb2ZpbGVEZXNjcmlwdGlvbklucHV0LnZhbHVlID0gcHJvZmlsZVVzZXJJbmZvLmRlc2NyaXB0aW9uO1xyXG4gIHByb2ZpbGVFZGl0Rm9ybVBvcHVwLm9wZW4oKTtcclxufVxyXG5cclxuLy8gRXZlbnQgbGlzdGVuZXJzXHJcbnZhcmlhYmxlcy5wcm9maWxlSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9wZW5BdmF0YXJGb3JtKTtcclxudmFyaWFibGVzLmFkZE5ld0NhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9wZW5BZGRDYXJkRm9ybSk7XHJcbnZhcmlhYmxlcy5wcm9maWxlRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb3BlblByb2ZpbGVFZGl0Rm9ybSk7XHJcblxyXG4vLyBQb3B1cCB3aXRoIGltYWdlXHJcbmNvbnN0IHBvcHVwV2l0aEltYWdlID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiI21vZGFsLXByZXZpZXdcIik7XHJcbnBvcHVwV2l0aEltYWdlLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vLyBQb3B1cCB3aXRoIGRlbGV0ZVxyXG5jb25zdCBkZWxldGVNb2RhbCA9IG5ldyBQb3B1cFdpdGhEZWxldGUoXCIjZGVsZXRlLW1vZGFsXCIpO1xyXG5kZWxldGVNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gUG9wdXAgd2l0aCBmb3JtXHJcbmNvbnN0IGFkZENhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIFwiI2FkZC1jYXJkLW1vZGFsXCIsXHJcbiAgaGFuZGxlQWRkQ2FyZEZvcm1TdWJtaXRcclxuKTtcclxuYWRkQ2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCBwcm9maWxlRWRpdEZvcm1Qb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxyXG4gIGhhbmRsZVByb2ZpbGVFZGl0Rm9ybVN1Ym1pdFxyXG4pO1xyXG5wcm9maWxlRWRpdEZvcm1Qb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gRnVuY3Rpb25zXHJcblxyXG5mdW5jdGlvbiBoYW5kbGVJbWFnZUNsaWNrKGNhcmREYXRhKSB7XHJcbiAgcG9wdXBXaXRoSW1hZ2Uub3BlbihjYXJkRGF0YSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUNsaWNrKGNhcmQpIHtcclxuICAvLyBvcGVuIHRoZSBtb2RhbFxyXG4gIGRlbGV0ZU1vZGFsLm9wZW4oKTtcclxuICAvLyBzZXQgdGhlIHN1Ym1pdCBhY3Rpb25cclxuICBkZWxldGVNb2RhbC5zZXRTdWJtaXRBY3Rpb24oKCkgPT4ge1xyXG4gICAgYXBpXHJcbiAgICAgIC5kZWxldGVDYXJkKGNhcmQuX2lkKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgZGVsZXRlTW9kYWwuY2xvc2UoKTtcclxuICAgICAgICBjYXJkLmhhbmRsZURlbGV0ZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUxpa2VDbGljayhjYXJkKSB7XHJcbiAgYXBpXHJcbiAgICAudXBkYXRlTGlrZShjYXJkLl9pZCwgY2FyZC5pc0xpa2VkKCkpXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgIGNhcmQuaGFuZGxlTGlrZSgpO1xyXG4gICAgICBjb25zb2xlLmxvZyhjYXJkKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUF2YXRhckZvcm1TdWJtaXQoaW5wdXRWYWx1ZXMpIHtcclxuICBzZXRCdXR0b25UZXh0KHZhcmlhYmxlcy5hdmF0YXJNb2RhbEJ1dHRvbiwgXCJTYXZpbmcuLi5cIik7XHJcbiAgYXBpXHJcbiAgICAudXBkYXRlQXZhdGFyKGlucHV0VmFsdWVzLmxpbmspXHJcbiAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIHVzZXJJbmZvLnNldEF2YXRhcihyZXMuYXZhdGFyKTtcclxuICAgICAgY29uc29sZS5sb2cocmVzKTtcclxuICAgICAgYXZhdGFyTW9kYWwuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goY29uc29sZS5lcnJvcilcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgc2V0QnV0dG9uVGV4dCh2YXJpYWJsZXMuYXZhdGFyTW9kYWxCdXR0b24sIFwiU2F2ZVwiKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlRWRpdEZvcm1TdWJtaXQoZm9ybURhdGEpIHtcclxuICB1c2VySW5mby5zZXRVc2VySW5mbyhmb3JtRGF0YS50aXRsZSwgZm9ybURhdGEuZGVzY3JpcHRpb24pO1xyXG4gIHByb2ZpbGVFZGl0Rm9ybVBvcHVwLmNsb3NlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUFkZENhcmRGb3JtU3VibWl0KGlucHV0VmFsdWVzKSB7XHJcbiAgc2V0QnV0dG9uVGV4dCh2YXJpYWJsZXMuYWRkTmV3Q2FyZEJ1dHRvbiwgXCJTYXZpbmcuLi5cIik7XHJcbiAgYXBpXHJcbiAgICAuYWRkTmV3Q2FyZChpbnB1dFZhbHVlcylcclxuICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgY3JlYXRlQ2FyZChyZXMpO1xyXG4gICAgICB2YXJpYWJsZXMuYWRkTmV3TW9kYWxDYXJkLnJlc2V0KCk7XHJcbiAgICAgIGNhcmRGb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIGFkZENhcmRQb3B1cC5jbG9zZSgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChjb25zb2xlLmVycm9yKVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBzZXRCdXR0b25UZXh0KHZhcmlhYmxlcy5hZGROZXdDYXJkQnV0dG9uLCBcIlNhdmVcIik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gUmVuZGVyIHRoZSBjYXJkIHNlY3Rpb25cclxuY2FyZFNlY3Rpb24ucmVuZGVySXRlbXMoKTtcclxuXHJcbi8vIEVuYWJsZSB2YWxpZGF0aW9uIGZvciB0aGUgZWRpdCBmb3JtXHJcbmVkaXRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTsiXSwibmFtZXMiOlsiQ2FyZCIsImNhcmREYXRhIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZURlbGV0ZUNsaWNrIiwiaGFuZGxlTGlrZUljb24iLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVEZWxldGVDbGljayIsIl9oYW5kbGVMaWtlSWNvbiIsIl9oYW5kbGVJbWFnZUNsaWNrIiwia2V5IiwidmFsdWUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjbG9uZU5vZGUiLCJfdGhpcyIsIl9jYXJkRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJyZW1vdmUiLCJfZ2V0VGVtcGxhdGUiLCJjYXJkSW1hZ2VFTCIsInNyYyIsImFsdCIsInRleHRDb250ZW50IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiRm9ybVZhbGlkYXRvciIsImZvcm1TZWxlY3RvciIsInZhbGlkYXRpb25TZXR0aW5ncyIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtRWwiLCJfaW5wdXRFbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3N1Ym1pdEJ1dHRvbnMiLCJpbnB1dEVsIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9zaG93SW5wdXRFcnJvciIsIl9oaWRlSW5wdXRFcnJvciIsImlucHV0IiwiZXJyb3JNZXNzYWdlRWwiLCJjb25jYXQiLCJpZCIsImFkZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiaW5wdXRMaXN0IiwiZXZlcnkiLCJfaGFzSW52YWxpZElucHV0IiwiZGlzYWJsZWQiLCJmb3JFYWNoIiwiZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ0b2dnbGVCdXR0b25TdGF0ZSIsInByZXZlbnREZWZhdWx0IiwiU2VjdGlvbiIsIl9yZWYiLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiaXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiY2xvc2UiLCJfcG9wdXBFbGVtZW50IiwiX2hhbmRsZUVzY0Nsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl90aGlzMiIsImV2dCIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoSW1hZ2UiLCJfUG9wdXAiLCJfaW5oZXJpdHMiLCJfc3VwZXIiLCJjYWxsIiwiX3BvcHVwSW1hZ2UiLCJfcG9wdXBUaXRsZSIsIl9nZXQiLCJfZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX3BvcHVwRm9ybSIsInJlc2V0IiwiaW5wdXRWYWx1ZXMiLCJpbnB1dHMiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJQb3B1cFdpdGhEZWxldGUiLCJVc2VySW5mbyIsInRpdGxlU2VsZWN0b3IiLCJkZXNjcmlwdGlvblNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfdGl0bGVFbCIsIl9kZXNjcmlwdGlvbkVsIiwiX2F2YXRhckVsIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImF2YXRhciIsIkFwaSIsIl9iYXNlVXJsIiwiX2hlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImZldGNoIiwiaGVhZGVycyIsInRoZW4iLCJfY2hlY2tSZXNwb25zZSIsImFib3V0IiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYXJkSWQiLCJhdmF0YXJVcmwiLCJpc0xpa2VkIiwidmFyaWFibGVzIiwicHJvZmlsZUVkaXRCdXR0b24iLCJwcm9maWxlRWRpdE1vZGFsIiwicHJvZmlsZVRpdGxlSW5wdXQiLCJwcm9maWxlRGVzY3JpcHRpb25JbnB1dCIsInByb2ZpbGVJbWFnZSIsImFkZE5ld01vZGFsQ2FyZCIsImNhcmRMaXN0RWwiLCJhZGROZXdDYXJkQnV0dG9uIiwiZGVsZXRlTW9kYWwiLCJhdmF0YXJJbnB1dCIsImF2YXRhck1vZGFsIiwiYXZhdGFyTW9kYWxCdXR0b24iLCJhcGkiLCJiYXNlVXJsIiwidXNlckluZm8iLCJjYXJkRm9ybVZhbGlkYXRvciIsImVuYWJsZVZhbGlkYXRpb24iLCJlZGl0Rm9ybVZhbGlkYXRvciIsImNhcmRTZWN0aW9uIiwiY3JlYXRlQ2FyZCIsImFkZEl0ZW0iLCJzZXRCdXR0b25UZXh0IiwidXBkYXRlQXZhdGFyIiwic2V0QXZhdGFyIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyb3IiLCJmaW5hbGx5IiwiY2FyZCIsImhhbmRsZUxpa2VDbGljayIsInNlY3Rpb24iLCJnZXRWaWV3Iiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJvcGVuIiwiYWRkQ2FyZFBvcHVwIiwicHJvZmlsZVVzZXJJbmZvIiwiZ2V0VXNlckluZm8iLCJwcm9maWxlRWRpdEZvcm1Qb3B1cCIsInBvcHVwV2l0aEltYWdlIiwiYWRkTmV3Q2FyZCIsImZvcm1EYXRhIiwic2V0VXNlckluZm8iLCJzZXRTdWJtaXRBY3Rpb24iLCJkZWxldGVDYXJkIiwiX2lkIiwiaGFuZGxlRGVsZXRlIiwidXBkYXRlTGlrZSIsImhhbmRsZUxpa2UiLCJyZW5kZXJJdGVtcyJdLCJzb3VyY2VSb290IjoiIn0=