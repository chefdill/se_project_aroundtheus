!function(){"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,r){for(var n=0;n<r.length;n++){var o=r[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,r){if("object"!==t(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}var r=function(){function t(e,r,n,o,i){var a=e.name,u=e.link,c=e.likes,l=e.owner;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=a,this._link=u,this._likes=c,this._owner=l,this._cardSelector=r,this._handleImageClick=n,this._handleDeleteClick=o,this._handleLikeIcon=i}var r,n;return r=t,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}},{key:"_setEventListeners",value:function(){var t=this;this._cardElement.querySelector(".card__button-remove").addEventListener("click",(function(){t._handleDeleteClick()})),this._cardElement.querySelector(".card__like-button").addEventListener("click",(function(){t._handleLikeIcon()})),this._cardElement.querySelector(".card__image").addEventListener("click",(function(){t._handleImageClick({name:t._name,link:t._link})}))}},{key:"_handleLike",value:function(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}},{key:"_handleDelete",value:function(){this._cardElement.remove(),this._cardElement=null}},{key:"updateLikeView",value:function(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}},{key:"getView",value:function(){var t=this;this._cardElement=this._getTemplate();var e=this._cardElement.querySelector(".card__image");e.src=this._link,e.alt=this._name,this._cardElement.querySelector(".card__label-title").textContent=this._name;var r=this._likes.some((function(e){return e._id===t._owner._id}));return this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active",r),this._setEventListeners(),this._cardElement}}])&&e(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}();function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===n(i)?i:String(i)),o)}var i}var a=function(){function t(e,r){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._inputSelector=r.inputSelector,this._submitButtonSelector=r.submitButtonSelector,this._inactiveButtonClass=r.inactiveButtonClass,this._inputErrorClass=r.inputErrorClass,this._errorClass=r.errorClass,this._formEl=e,this._inputEls=function(t){if(Array.isArray(t))return o(t)}(n=this._formEl.querySelectorAll("modal__input"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(n)||function(t,e){if(t){if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._submitButtons=this._formEl.querySelector(this._submitButtonSelector)}var e,r;return e=t,(r=[{key:"_checkInputValidity",value:function(t){if(!t.validity.valid)return this._showInputError(t);this._hideInputError(t)}},{key:"_showInputError",value:function(t){var e=this._formEl.querySelector("#".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t){var e=this._formEl.querySelector("#".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}},{key:"_hasInvalidInput",value:function(t){return!t.every((function(t){return t.validity.valid}))}},{key:"toggleButtonState",value:function(){if(this._hasInvalidInput(this._inputEls))return this._submitButtons.classList.add(this._inactiveButtonClass),void(this._submitButtons.disabled=!0);this._submitButtons.classList.remove(this._inactiveButtonClass),this._submitButtons.disabled=!1}},{key:"_setEventListeners",value:function(){var t=this;this._inputEls.forEach((function(e){e.addEventListener("input",(function(r){t._checkInputValidity(e),t.toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._formEl.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}}])&&i(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),u=a;function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==c(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===c(o)?o:String(o)),n)}var o}var s=function(){function t(e,r){var n=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=n,this._renderer=o,this._container=document.querySelector(r)}var e,r;return e=t,(r=[{key:"renderItems",value:function(){var t=this;this._items.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&l(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,y(n.key),n)}}function y(t){var e=function(t,e){if("object"!==f(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==f(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===f(e)?e:String(e)}var d=function(){function t(e){var r,n,o,i=this,a=e.popupSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=function(t){"Escape"===t.key&&i.close()},(n=y(n="_handleEscClose"))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this._popupElement=document.querySelector(a)}var e,r;return e=t,(r=[{key:"open",value:function(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var t=this;this._popupElement.addEventListener("click",(function(e){(e.target===t._popupElement||e.target.classList.contains("modal__close"))&&t.close()}))}}])&&p(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==m(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==m(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===m(o)?o:String(o)),n)}var o}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},h.apply(this,arguments)}function b(t,e){return b=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},b(t,e)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var S=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&b(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_(n);if(o){var r=_(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===m(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,{popupSelector:t}))._popupImage=e._popupElement.querySelector(".modal__image"),e._popupTitle=e._popupElement.querySelector(".modal__preview-title"),e}return e=a,(r=[{key:"open",value:function(t,e){this._popupImage.src=t,this._popupImage.alt=e,this._popupTitle.textContent=e,h(_(a.prototype),"open",this).call(this)}}])&&v(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(d);function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function w(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function E(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==g(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==g(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===g(o)?o:String(o)),n)}var o}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=O(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},k.apply(this,arguments)}function j(t,e){return j=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},j(t,e)}function O(t){return O=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},O(t)}var P=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&j(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=O(n);if(o){var r=O(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===g(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t,e){var r,n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,{popupSelector:t}))._handleFormSubmit=e,r._popupForm=r._popupElement.querySelector(".modal__form"),r._inputEls=function(t){if(Array.isArray(t))return w(t)}(n=r._popupForm.querySelectorAll(".modal__input"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(n)||function(t,e){if(t){if("string"==typeof t)return w(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?w(t,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r}return e=a,(r=[{key:"close",value:function(){this._popupForm.reset(),k(O(a.prototype),"close",this).call(this)}},{key:"_getInputValues",value:function(){var t={};return inputs.forEach((function(e){return t[e.name]=e.value})),t}},{key:"setEventListeners",value:function(){var t=this;this._popupForm.addEventListener("submit",(function(e){e.preventDefault(),t._handleFormSubmit(t._getInputValues())})),k(O(a.prototype),"setEventListeners",this).call(this)}},{key:"getForm",value:function(){return this._popupForm}}])&&E(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(d);function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function L(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==C(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==C(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===C(o)?o:String(o)),n)}var o}function I(){return I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=B(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},I.apply(this,arguments)}function T(t,e){return T=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},T(t,e)}function B(t){return B=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},B(t)}var q=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&T(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=B(n);if(o){var r=B(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===C(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,{popupSelector:t}))._formEl=e._popupElement.querySelector(".modal__form"),e}return e=a,(r=[{key:"setEventListeners",value:function(){var t=this;this._formEl.addEventListener("submit",(function(e){e.preventDefault(),t._handleFormSubmit()})),I(B(a.prototype),"setEventListeners",this).call(this)}},{key:"setSubmitAction",value:function(t){this._handleFormSubmit=t}}])&&L(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(d);function R(t){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},R(t)}function A(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==R(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==R(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===R(o)?o:String(o)),n)}var o}var U=function(){function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._titleEl=document.querySelector(e),this._descriptionEl=document.querySelector(r),this._avatarEl=document.querySelector(n)}var e,r;return e=t,(r=[{key:"getUserInfo",value:function(){return{title:this._titleEl.textContent,description:this._descriptionEl.textContent}}},{key:"setUserInfo",value:function(t,e){this._titleEl.textContent=t,this._descriptionEl.textContent=e}},{key:"setAvatar",value:function(t){this._avatarEl.src=t}}])&&A(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function x(t){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},x(t)}function D(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==x(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==x(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===x(o)?o:String(o)),n)}var o}var N=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl="https://around-api.en.tripleten-services.com/v1",this._headers={authorization:"f00dbe4d-3bcf-40e3-a46f-9e1ed8206bd5","Content-type":"application/json"}}var e,r;return e=t,(r=[{key:"_getResponse",value:function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}},{key:"getEditProfile",value:function(t,e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:e})}).then(this._checkResponse)}},{key:"getNewCard",value:function(t,e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:e})})}},{key:"deleteCard",value:function(t){return fetch("".concat(this._baseUrl,"/cards/").concat(t),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}},{key:"changeAvatar",value:function(t){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatarUrl:t})}).then(this._checkResponse)}},{key:"updateLike",value:function(t,e){return fetch("".concat(this._baseUrl,"/cards/").concat(t,"/likes"),{method:e?"DELETE":"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"updateAvatar",value:function(t){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._checkResponse)}}])&&D(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),M={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},V={profileEditButton:document.querySelector("#profile-edit-button"),profileEditModal:document.querySelector("#profile-edit-modal"),profileTitleInput:document.querySelector("#profile-title-input"),profileDescriptionInput:document.querySelector("#profile-description-input"),profileImage:document.querySelector(".profile__image"),addNewModalCard:document.querySelector("#add-card-modal"),cardListEl:document.querySelector(".cards__list"),addNewCardButton:document.querySelector(".profile__plus-button"),deleteModal:document.querySelector("#delete-modal"),avatarInput:document.querySelector("#avatar-url-input"),avatarModal:document.querySelector("#avatar-modal"),avatarModalButton:document.querySelector("#avatar-modal-button")},F=new N({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f00dbe4d-3bcf-40e3-a46f-9e1ed8206bd5","Content-Type":"application/json"}}),z=new U(".profile__title",".profile__description",".profile__image");F.getInitialCards().then((function(t){(Y=new s({items:t,renderer:function(t){G(t)}},"cards__list")).renderItems(),console.log(t)})).catch(console.error);var J=new u(V.addNewModalCard,M);J.enableValidation();var H=new u(V.profileEditModal.querySelector(".modal__form"),M),Y=new s({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg",alt:"Yosemite Valley"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg",alt:"Lake Louise"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg",alt:"Bald Mountains"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg",alt:"Latemar"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg ",alt:"Vanoise National Park"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg  ",alt:"Lago di Braies"}],renderer:function(t){var e=G(t);Y.addItem(e)}},".cards__list"),$=new P("#avatar-modal",(function(t){setButtonText(V.avatarModalButton,"Saving..."),F.updateAvatar(t.link).then((function(t){z.setAvatar(t.avatar),console.log(t),$.close()})).catch(console.error).finally((function(){setButtonText(V.avatarModalButton,"Save")}))}));function G(t){var e=new r(t,"#card-template",Z,tt,et);Y.addItem(e.getView())}$.setEventListeners(),Y.renderItems(),G(cardData),V.profileImage.addEventListener("click",(function(){$.open()})),V.addNewCardButton.addEventListener("click",(function(){W.open()})),V.profileEditButton.addEventListener("click",(function(){var t=z.getUserInfo();profileTitleInput.value=t.title,profileDescriptionInput.value=t.description,X.open()}));var K=new S("#modal-preview");K.setEventListeners();var Q=new q("#delete-modal");Q.setEventListeners();var W=new P("#add-card-modal",(function(t){setButtonText(V.addNewCardButton,"Saving..."),F.addNewCard(t).then((function(t){G(t),V.addNewModalCard.reset(),J.toggleButtonState(),W.close()})).catch(console.error).finally((function(){setButtonText(V.addNewCardButton,"Save")}))}));W.setEventListeners();var X=new P("#profile-edit-modal",(function(t){z.setUserInfo(t.title,t.description),X.close()}));function Z(t){K.open(t)}function tt(t){Q.open(),Q.setSubmitAction((function(){F.deleteCard(t._id).then((function(){Q.close(),t.handleDelete()})).catch(console.error)}))}function et(t){F.updateLike(t._id,t.isLiked()).then((function(){t.handleLike(),console.log(t)})).catch(console.error)}X.setEventListeners(),cardSection.renderItems(),H.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QjFDLFFBQzFCNkQsRUFBa0JoRyxvQkFDbEI2RyxFQUFhL0YsT0FDZixJQUNDZ0YsTUFBTUYsUUFBUUcsT0FDZFEsU0FBUSxXQUNQSCxjQUFjN0IsRUFBVVEsaUJBQWtCLE9BQzVDLEdBQ0osSUF6RUE4QixFQUFhRixvQkFFYixJQUFNSyxFQUF1QixJQUFJakYsRUFDL0IsdUJBbURGLFNBQXFDb0YsR0FDbkM3QixFQUFTOEIsWUFBWUQsRUFBU3BFLE1BQU9vRSxFQUFTbkUsYUFDOUNnRSxFQUFxQmxHLE9BQ3ZCLElBL0NBLFNBQVM1RixFQUFpQnVLLEdBQ3hCd0IsRUFBZUwsS0FBS25CLEVBQ3RCLENBRUEsU0FBU3RLLEdBQWtCcUwsR0FFekJ4QixFQUFZNEIsT0FFWjVCLEVBQVlxQyxpQkFBZ0IsV0FDMUJqQyxFQUNHa0MsV0FBV2QsRUFBSzVJLEtBQ2hCa0csTUFBSyxXQUNKa0IsRUFBWWxFLFFBQ1owRixFQUFLZSxjQUNQLElBQ0N6QixNQUFNRixRQUFRRyxNQUNuQixHQUNGLENBRUEsU0FBU1UsR0FBZ0JELEdBQ3ZCcEIsRUFDR29DLFdBQVdoQixFQUFLNUksSUFBSzRJLEVBQUsvSSxXQUMxQnFHLE1BQUssV0FDSjBDLEVBQUtpQixhQUNMN0IsUUFBUUMsSUFBSVcsRUFDZCxJQUNDVixNQUFNRixRQUFRRyxNQUNuQixDQS9CQWlCLEVBQXFCTCxvQkFzRXJCZSxZQUFZL0IsY0FHWk8sRUFBa0JELGtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhEZWxldGUuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3BhZ2VzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4vLyAgICAgY29uc3RydWN0b3IoXHJcbi8vICAgICAgIGNhcmREYXRhLCBcclxuLy8gICAgICAgY2FyZFNlbGVjdG9yLCBcclxuLy8gICAgICAgaGFuZGxlSW1hZ2VDbGljaywgXHJcbi8vICAgICAgIGhhbmRsZURlbGV0ZUNsaWNrLCBcclxuLy8gICAgICAgaGFuZGxlTGlrZUljb25cclxuLy8gICAgICAgKSBcclxuICAgICAgXHJcbi8vICAgICAgIHtcclxuLy8gICAgICAgdGhpcy5fbmFtZSA9IGNhcmREYXRhLm5hbWU7XHJcbi8vICAgICAgIHRoaXMuX2xpbmsgPSBjYXJkRGF0YS5saW5rO1xyXG4vLyAgICAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbi8vICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrID0gaGFuZGxlRGVsZXRlQ2xpY2s7XHJcbi8vICAgICAgIHRoaXMuX2hhbmRsZUxpa2VJY29uID0gaGFuZGxlTGlrZUljb247XHJcbi8vICAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIF9nZXRUZW1wbGF0ZSgpIHtcclxuLy8gICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4vLyAgICAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuLy8gICAgICAgICAuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgXHJcbi8vICAgICAgIHJldHVybiBjYXJkRWxlbWVudDtcclxuLy8gICAgIH1cclxuICBcclxuLy8gICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuLy8gICAgICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuLy8gICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCJjYXJkX19idXR0b24tcmVtb3ZlXCIpXHJcbi8vICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4vLyAgICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKCk7XHJcbi8vICAgICAgIH0pO1xyXG5cclxuLy8gICAgICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuLy8gICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCJjYXJkX19saWtlLWJ1dHRvblwiKVxyXG4vLyAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuLy8gICAgICAgICB0aGlzLl9oYW5kbGVMaWtlSWNvbigpO1xyXG4vLyAgICAgICB9KTtcclxuXHJcbi8vICAgICAgIHRoaXMuX2NhcmRFbGVtZW50XHJcbi8vICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpXHJcbi8vICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4vLyAgICAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soeyBuYW1lOiB0aGlzLl9uYW1lLCBsaW5rOiB0aGlzLl9saW5rIH0pO1xyXG4vLyAgICAgICB9KTtcclxuXHJcbi8vICAgICB9XHJcbiAgICBcclxuLy8gICAgIF9oYW5kbGVMaWtlKCkge1xyXG4vLyAgICAgICB0aGlzLl9jYXJkRWxlbWVudFxyXG4vLyAgICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpXHJcbi8vICAgICAgICAgLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbi8vICAgICB9XHJcbiAgXHJcbi8vICAgICBfaGFuZGxlRGVsZXRlKCkge1xyXG4vLyAgICAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcclxuLy8gICAgICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBudWxsO1xyXG4vLyAgICAgfVxyXG4gIFxyXG4vLyAgICAgZ2V0VmlldygpIHtcclxuLy8gICAgICAgY29uc3QgY2FyZERhdGEgPSB7IGxpbms6IHRoaXMuX2xpbmssIG5hbWU6IHRoaXMuX25hbWUgfTtcclxuLy8gICAgICAgdGhpcy5fY2FyZEVsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4vLyAgICAgICBjb25zdCBjYXJkSW1hZ2VFTCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbi8vICAgICAgIGNhcmRJbWFnZUVMLnNyYyA9IHRoaXMuX2xpbms7XHJcbi8vICAgICAgIGNhcmRJbWFnZUVMLmFsdCA9IHRoaXMuX25hbWU7XHJcbi8vICAgICAgIGNvbnN0IGNhcmRUaXRsZUVMID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19sYWJlbC10aXRsZVwiKTtcclxuLy8gICAgICAgY2FyZFRpdGxlRUwudGV4dENvbnRlbnQgPSBjYXJkRGF0YS5uYW1lO1xyXG4gIFxyXG4vLyAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIFxyXG4vLyAgICAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7ICBcclxuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGxpbmssIGxpa2VzLCBvd25lciB9LCBjYXJkU2VsZWN0b3IsIGhhbmRsZUltYWdlQ2xpY2ssIGhhbmRsZURlbGV0ZUNsaWNrLCBoYW5kbGVMaWtlSWNvbikge1xyXG4gIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gIHRoaXMuX2xpbmsgPSBsaW5rOyAgICBcclxuICB0aGlzLl9saWtlcyA9IGxpa2VzOyAgICBcclxuICB0aGlzLl9vd25lciA9IG93bmVyO1xyXG4gIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcclxuICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayA9IGhhbmRsZURlbGV0ZUNsaWNrO1xyXG4gIHRoaXMuX2hhbmRsZUxpa2VJY29uID0gaGFuZGxlTGlrZUljb247XHJcbn1cclxuXHJcbl9nZXRUZW1wbGF0ZSgpIHtcclxuICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gIHJldHVybiBjYXJkRWxlbWVudDtcclxufVxyXG5cclxuX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gIHRoaXMuX2NhcmRFbGVtZW50XHJcbiAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19idXR0b24tcmVtb3ZlXCIpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2soKTtcclxuICAgIH0pO1xyXG5cclxuICB0aGlzLl9jYXJkRWxlbWVudFxyXG4gICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVMaWtlSWNvbigpO1xyXG4gICAgfSk7XHJcblxyXG4gIHRoaXMuX2NhcmRFbGVtZW50XHJcbiAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soeyBuYW1lOiB0aGlzLl9uYW1lLCBsaW5rOiB0aGlzLl9saW5rIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbl9oYW5kbGVMaWtlKCkge1xyXG4gIHRoaXMuX2NhcmRFbGVtZW50XHJcbiAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKVxyXG4gICAgLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbn1cclxuXHJcbl9oYW5kbGVEZWxldGUoKSB7XHJcbiAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgdGhpcy5fY2FyZEVsZW1lbnQgPSBudWxsO1xyXG59XHJcblxyXG51cGRhdGVMaWtlVmlldygpIHtcclxuICBpZiAodGhpcy5faXNMaWtlZCkge1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgfVxyXG59XHJcblxyXG5nZXRWaWV3KCkge1xyXG4gIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICBjb25zdCBjYXJkSW1hZ2VFTCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgY2FyZEltYWdlRUwuc3JjID0gdGhpcy5fbGluaztcclxuICBjYXJkSW1hZ2VFTC5hbHQgPSB0aGlzLl9uYW1lO1xyXG4gIGNvbnN0IGNhcmRUaXRsZUVMID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19sYWJlbC10aXRsZVwiKTtcclxuICBjYXJkVGl0bGVFTC50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgY29uc3QgaXNMaWtlZCA9IHRoaXMuX2xpa2VzLnNvbWUoKGxpa2UpID0+IGxpa2UuX2lkID09PSB0aGlzLl9vd25lci5faWQpO1xyXG4gIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIikuY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiLCBpc0xpa2VkKTtcclxuXHJcbiAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG59XHJcbn0iLCJjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCBmb3JtU2VsZWN0b3IsIHZhbGlkYXRpb25TZXR0aW5ncyApIHtcclxuICAgICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IHZhbGlkYXRpb25TZXR0aW5ncy5pbnB1dFNlbGVjdG9yO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IHZhbGlkYXRpb25TZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IHZhbGlkYXRpb25TZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xyXG4gICAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSB2YWxpZGF0aW9uU2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgICB0aGlzLl9lcnJvckNsYXNzID0gdmFsaWRhdGlvblNldHRpbmdzLmVycm9yQ2xhc3M7XHJcbiAgICAgIHRoaXMuX2Zvcm1FbCA9IGZvcm1TZWxlY3RvcjtcclxuICAgICAgdGhpcy5faW5wdXRFbHMgPSBbLi4udGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJtb2RhbF9faW5wdXRcIildO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b25zID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKSB7XHJcbiAgICAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgIH1cclxuICBcclxuICAgIF9zaG93SW5wdXRFcnJvcihpbnB1dCkge1xyXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2VFbCA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dC5pZH0tZXJyb3JgKTtcclxuICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IGlucHV0LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgICBlcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgX2hpZGVJbnB1dEVycm9yKGlucHV0KSB7XHJcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0LmlkfS1lcnJvcmApO1xyXG4gICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICAgIGVycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgICAgZXJyb3JNZXNzYWdlRWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIH1cclxuICBcclxuICAgIF9oYXNJbnZhbGlkSW5wdXQoaW5wdXRMaXN0KSB7XHJcbiAgICAgIHJldHVybiAhaW5wdXRMaXN0LmV2ZXJ5KChpbnB1dEVsKSA9PiBpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKTtcclxuICAgIH1cclxuICBcclxuICAgIHRvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KHRoaXMuX2lucHV0RWxzKSkge1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbnMuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25zLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9ucy5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b25zLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgICBpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWwpO1xyXG4gICAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICBcclxuICAgIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICAgIHRoaXMuX2Zvcm1FbC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuICB9XHJcbiAgZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcclxuXHJcbiIsImNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VjdGlvbjsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkgIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB9IFxyXG4gICAgXHJcbiAgICBvcGVuKCkge1xyXG4gICAgICAgIC8vb3BlbiBwb3B1cHNcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgLy9jbG9zZSBwb3B1cHNcclxuICAgICAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICBfaGFuZGxlRXNjQ2xvc2UgPSAoZSkgPT4ge1xyXG4gICAgICAgIC8vbGlzdGVucyBmb3IgZXNjIGJ1dHRvblxyXG4gICAgICAgICAgaWYgKGUua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgIH0gICAgICBcclxuICAgICAgICB9O1xyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCl7XHJcbiAgICAgICAgLy9zZXRzIGxpc3RlbmVyc1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICBpZihcclxuICAgICAgICAgICAgICAgIGV2dC50YXJnZXQgPT09IHRoaXMuX3BvcHVwRWxlbWVudCB8fCBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX19jbG9zZVwiKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgICAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZVwiKTtcclxuICAgICAgICB0aGlzLl9wb3B1cFRpdGxlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3ByZXZpZXctdGl0bGVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbiggbGluaywgbmFtZSApe1xyXG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2Uuc3JjID0gbGluaztcclxuICAgICAgICB0aGlzLl9wb3B1cEltYWdlLmFsdCA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBUaXRsZS50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICAgICAgc3VwZXIub3BlbigpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IgKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgICAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIilcclxuICAgICAgICB0aGlzLl9pbnB1dEVscyA9IFsuLi50aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIildO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xyXG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge307XHJcbiAgICAgICAgaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiBcclxuICAgICAgICAgICAgKGlucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWUpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGlucHV0VmFsdWVzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCl7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZvcm0oKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBGb3JtO1xyXG4gICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aERlbGV0ZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLl9mb3JtRWwgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fZm9ybUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KCk7XHJcbiAgICB9KTtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBzZXRTdWJtaXRBY3Rpb24oaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZVNlbGVjdG9yLCBkZXNjcmlwdGlvblNlbGVjdG9yLCBhdmF0YXJTZWxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuX3RpdGxlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRpdGxlU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRlc2NyaXB0aW9uU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2F2YXRhckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICAgICAgY29uc3QgdXNlckluZm8gPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLl90aXRsZUVsLnRleHRDb250ZW50LFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5fZGVzY3JpcHRpb25FbC50ZXh0Q29udGVudCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB1c2VySW5mbztcclxuICAgIH1cclxuXHJcbiAgICBzZXRVc2VySW5mbyh0aXRsZSwgZGVzY3JpcHRpb24pIHtcclxuICAgICAgICB0aGlzLl90aXRsZUVsLnRleHRDb250ZW50ID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb25FbC50ZXh0Q29udGVudCA9IGRlc2NyaXB0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEF2YXRhcihhdmF0YXIpIHtcclxuICAgICAgICB0aGlzLl9hdmF0YXJFbC5zcmMgPSBhdmF0YXI7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVc2VySW5mbzsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fYmFzZVVybCA9IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIjtcclxuICAgIHRoaXMuX2hlYWRlcnMgPSB7XHJcbiAgICAgIGF1dGhvcml6YXRpb246IFwiZjAwZGJlNGQtM2JjZi00MGUzLWE0NmYtOWUxZWQ4MjA2YmQ1XCIsXHJcbiAgICAgIFwiQ29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIF9nZXRSZXNwb25zZShyZXMpIHtcclxuICAgIGlmIChyZXMub2spIHtcclxuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgfVxyXG5cclxuICAvLyAxIExPQURJTkcgVVNFUiBJTkZPUk1BVElPTiBJTlRPIFRIRSBTRVJWRVJcclxuICAvLyBHRVQgaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjEvdXNlcnMvbWUgXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgLy8gMiBMT0FESU5HIENBUkRTIEZST00gVEhFIFNFUlZFUlxyXG4gIC8vIEdFVCBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS9jYXJkcyBcclxuICAvLyBpbml0aWFsIHJlc3BvbnNlIHdpbGwgYmUgYW4gZW1wdHkgSlNPTiBhcnJheSBbXVxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICAvLyAzICBFRElUSU5HIFRIRSBQUk9GSUxFIFxyXG4gIC8vICBQQVRDSCBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS91c2Vycy9tZSBcclxuICAvLyBBZGQgQ29udGVudC10eXBlIGFmdGVyIHRoZSBhdXRob3JpemF0aW9uIHRva2VuIFxyXG4gIC8vIGJvZHk6IEpTT04uc3RyaW5naWZ5ICh7TkFNRSBhbmQgQUJPVVR9KSBcclxuICBnZXRFZGl0UHJvZmlsZShuYW1lLCBhYm91dCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWUsIFxyXG4gICAgICAgIGFib3V0OiBhYm91dFxyXG4gICAgICB9KVxyXG4gICAgICBcclxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG4gIC8vIDQgQURESU5HIEEgTkVXIENBUkRcclxuICAvLyBQT1NUIGh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxL2NhcmRzXHJcbiAgLy8gYm9keTogSlNPTi5zdHJpbmdpZnkgKHtOQU1FIGFuZCBMSU5LfSlcclxuICBnZXROZXdDYXJkKG5hbWUsIGxpbmspIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkgKHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGxpbms6IGxpbmtcclxuICAgICAgfSlcclxuICAgIH0pXHJcblxyXG59XHJcblxyXG4vLyA1ICYgNiBDUkVBVElORyBBIE5FVyBQT1BVUCBGT1IgREVMRVRJTkcgQSBDQVJEXHJcbiAgLy8gc2VuZCBERUxFVEUgcmVxdWVzdCBcclxuICAgIC8vIERFTEVURSBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS9jYXJkcy9jYXJkSWQgXHJcbiAgICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICB9KS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZUF2YXRhcihhdmF0YXJVcmwpIHtcclxuICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYXZhdGFyVXJsOiBhdmF0YXJVcmwgfSksXHJcbiAgICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTGlrZShjYXJkSWQsIGlzTGlrZWQpIHtcclxuICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcclxuICAgICAgICBtZXRob2Q6IGlzTGlrZWQgPyBcIkRFTEVURVwiIDogXCJQVVRcIixcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICB9KS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgdXBkYXRlQXZhdGFyKGF2YXRhcikge1xyXG4gICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgYXZhdGFyOiBhdmF0YXIsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgfVxyXG5cclxuIiwiICBjb25zdCBpbml0aWFsQ2FyZHMgPSBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC95b3NlbWl0ZS5qcGdcIixcclxuICAgICAgYWx0OiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbiAgICAgIGFsdDogXCJMYWtlIExvdWlzZVwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbiAgICAgIGFsdDogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxyXG4gICAgICBhbHQ6IFwiTGF0ZW1hclwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnIFwiLFxyXG4gICAgICBhbHQ6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXHJcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWdvLmpwZyAgXCIsXHJcbiAgICAgIGFsdDogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgfSxcclxuICBdO1xyXG5cclxuICAgIGNvbnN0IHZhbGlkYXRpb25TZXR0aW5ncyA9IHtcclxuICAgIC8vIGZvcm1TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm1cIixcclxuICAgIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICAgIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbl9kaXNhYmxlZFwiLFxyXG4gICAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvclwiXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdmFyaWFibGVzID0ge1xyXG4gICAgICBwcm9maWxlRWRpdEJ1dHRvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWVkaXQtYnV0dG9uXCIpLFxyXG4gICAgICBwcm9maWxlRWRpdE1vZGFsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiKSxcclxuICAgICAgcHJvZmlsZVRpdGxlSW5wdXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS10aXRsZS1pbnB1dFwiKSxcclxuICAgICAgcHJvZmlsZURlc2NyaXB0aW9uSW5wdXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1kZXNjcmlwdGlvbi1pbnB1dFwiKSxcclxuICAgICAgcHJvZmlsZUltYWdlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2ltYWdlXCIpLFxyXG4gICAgICBhZGROZXdNb2RhbENhcmQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtbW9kYWxcIiksXHJcbiAgICAgIGNhcmRMaXN0RWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpc3RcIiksXHJcbiAgICAgIGFkZE5ld0NhcmRCdXR0b246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fcGx1cy1idXR0b25cIiksXHJcbiAgICAgIGRlbGV0ZU1vZGFsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2RlbGV0ZS1tb2RhbFwiKSxcclxuICAgICAgYXZhdGFySW5wdXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXZhdGFyLXVybC1pbnB1dFwiKSxcclxuICAgICAgYXZhdGFyTW9kYWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXZhdGFyLW1vZGFsXCIpLFxyXG4gICAgICBhdmF0YXJNb2RhbEJ1dHRvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdmF0YXItbW9kYWwtYnV0dG9uXCIpLFxyXG4gICAgXHJcbiAgICB9XHJcblxyXG5cclxuZXhwb3J0IHtpbml0aWFsQ2FyZHMsIHZhbGlkYXRpb25TZXR0aW5ncywgdmFyaWFibGVzfTtcclxuXHJcbiIsImltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhEZWxldGUgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRGVsZXRlLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIGluaXRpYWxDYXJkcywgXHJcbiAgdmFsaWRhdGlvblNldHRpbmdzLCBcclxuICB2YXJpYWJsZXN9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcblxyXG5cclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiZjAwZGJlNGQtM2JjZi00MGUzLWE0NmYtOWUxZWQ4MjA2YmQ1XCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gIH1cclxufSk7IFxyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oXHJcbiAgXCIucHJvZmlsZV9fdGl0bGVcIixcclxuICBcIi5wcm9maWxlX19kZXNjcmlwdGlvblwiLFxyXG4gIFwiLnByb2ZpbGVfX2ltYWdlXCJcclxuKTtcclxuXHJcbmFwaVxyXG4gIC5nZXRJbml0aWFsQ2FyZHMoKVxyXG4gIC50aGVuKChyZXMpID0+IHtcclxuICAgIHNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICAgICAge1xyXG4gICAgICAgIGl0ZW1zOiByZXMsXHJcbiAgICAgICAgcmVuZGVyZXI6IChjYXJkRGF0YSkgPT4ge1xyXG4gICAgICAgICAgY3JlYXRlQ2FyZChjYXJkRGF0YSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgXCJjYXJkc19fbGlzdFwiXHJcbiAgICApO1xyXG4gICAgc2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG4gICAgY29uc29sZS5sb2cocmVzKTtcclxuICB9KVxyXG4gIC5jYXRjaChjb25zb2xlLmVycm9yKTtcclxuXHJcbi8vIGFwaVxyXG4vLyAgIC5nZXRVc2VySW5mbygpXHJcbi8vICAgLnRoZW4oKHJlcykgPT4ge1xyXG4vLyAgICAgY29uc29sZS5sb2cocmVzKTtcclxuLy8gICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHJlcy5uYW1lLCByZXMuYWJvdXQpO1xyXG4vLyAgICAgdXNlckluZm8uc2V0QXZhdGFyKHJlcy5hdmF0YXIpO1xyXG4vLyAgIH0pXHJcbi8vICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG5cclxuY29uc3QgY2FyZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YXJpYWJsZXMuYWRkTmV3TW9kYWxDYXJkLCB2YWxpZGF0aW9uU2V0dGluZ3MpO1xyXG5jYXJkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG5jb25zdCBwcm9maWxlRWRpdEZvcm0gPSB2YXJpYWJsZXMucHJvZmlsZUVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxyXG4gIHByb2ZpbGVFZGl0Rm9ybSxcclxuICB2YWxpZGF0aW9uU2V0dGluZ3NcclxuKTtcclxuXHJcbmxldCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAge1xyXG4gICAgaXRlbXM6IGluaXRpYWxDYXJkcyxcclxuICAgIHJlbmRlcmVyOiAoY2FyZERhdGEpID0+IHtcclxuICAgICAgY29uc3QgY2FyZExpc3RFbCA9IGNyZWF0ZUNhcmQoY2FyZERhdGEpO1xyXG4gICAgICBzZWN0aW9uLmFkZEl0ZW0oY2FyZExpc3RFbCk7XHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgXCIuY2FyZHNfX2xpc3RcIlxyXG4pO1xyXG5cclxuLy8gY29uc3QgcHJvZmlsZUVkaXRGb3JtUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuLy8gICBcIiNwcm9maWxlLWVkaXQtbW9kYWxcIixcclxuLy8gICBoYW5kbGVQcm9maWxlRWRpdEZvcm1TdWJtaXRcclxuLy8gKTtcclxuXHJcbmNvbnN0IGF2YXRhck1vZGFsID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjYXZhdGFyLW1vZGFsXCIsXHJcbiAgaGFuZGxlQXZhdGFyRm9ybVN1Ym1pdFxyXG4pO1xyXG5hdmF0YXJNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gZnVuY3Rpb24gb3BlbkF2YXRhckZvcm0oKSB7XHJcbi8vICAgYXZhdGFyTW9kYWwub3BlbigpO1xyXG4vLyB9XHJcblxyXG4vLyB2YXJpYWJsZXMucHJvZmlsZUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbi8vICAgb3BlbkF2YXRhckZvcm0oKTtcclxuLy8gfSk7XHJcblxyXG4vLyBjb25zdCBwb3B1cFdpdGhJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNtb2RhbC1wcmV2aWV3XCIpO1xyXG4vLyBwb3B1cFdpdGhJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gY29uc3QgYWRkQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbi8vICAgXCIjYWRkLWNhcmQtbW9kYWxcIixcclxuLy8gICBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdFxyXG4vLyApO1xyXG5cclxuLy8gY29uc3QgZGVsZXRlTW9kYWwgPSBuZXcgUG9wdXBXaXRoRGVsZXRlKFwiI2RlbGV0ZS1tb2RhbFwiKTtcclxuLy8gZGVsZXRlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIGZ1bmN0aW9uIHNldEJ1dHRvblRleHQoYnV0dG9uLCB0ZXh0KSB7XHJcbi8vICAgYnV0dG9uLnRleHRDb250ZW50ID0gdGV4dDtcclxuLy8gfVxyXG5cclxuLy8gZnVuY3Rpb24gaGFuZGxlSW1hZ2VDbGljayhjYXJkRGF0YSkge1xyXG4vLyAgIHBvcHVwV2l0aEltYWdlLm9wZW4oY2FyZERhdGEpO1xyXG4vLyB9XHJcblxyXG4vLyBmdW5jdGlvbiBoYW5kbGVEZWxldGVDbGljayhjYXJkKSB7XHJcbi8vICAgLy8gb3BlbiB0aGUgbW9kYWxcclxuLy8gICBkZWxldGVNb2RhbC5vcGVuKCk7XHJcbi8vICAgLy8gc2V0IHRoZSBzdWJtaXQgYWN0aW9uXHJcbi8vICAgZGVsZXRlTW9kYWwuc2V0U3VibWl0QWN0aW9uKCgpID0+IHtcclxuLy8gICAgIGFwaVxyXG4vLyAgICAgICAuZGVsZXRlQ2FyZChjYXJkLl9pZClcclxuLy8gICAgICAgLnRoZW4oKCkgPT4ge1xyXG4vLyAgICAgICAgIGRlbGV0ZU1vZGFsLmNsb3NlKCk7XHJcbi8vICAgICAgICAgY2FyZC5oYW5kbGVEZWxldGUoKTtcclxuLy8gICAgICAgfSlcclxuLy8gICAgICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG4vLyAgIH0pO1xyXG4vLyB9XHJcblxyXG4vLyBmdW5jdGlvbiBoYW5kbGVMaWtlQ2xpY2soY2FyZCkge1xyXG4vLyAgIGFwaVxyXG4vLyAgICAgLnVwZGF0ZUxpa2UoY2FyZC5faWQsIGNhcmQuaXNMaWtlZCgpKVxyXG4vLyAgICAgLnRoZW4oKCkgPT4ge1xyXG4vLyAgICAgICBjYXJkLmhhbmRsZUxpa2UoKTtcclxuLy8gICAgICAgY29uc29sZS5sb2coY2FyZCk7XHJcbi8vICAgICB9KVxyXG4vLyAgICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG4vLyB9XHJcblxyXG4vLyBmdW5jdGlvbiBoYW5kbGVQcm9maWxlRWRpdEZvcm1TdWJtaXQoZm9ybURhdGEpIHtcclxuLy8gICB1c2VySW5mby5zZXRVc2VySW5mbyhmb3JtRGF0YS50aXRsZSwgZm9ybURhdGEuZGVzY3JpcHRpb24pO1xyXG4vLyAgIHByb2ZpbGVFZGl0Rm9ybVBvcHVwLmNsb3NlKCk7XHJcbi8vIH1cclxuXHJcbi8vIGVkaXRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbi8vIHZhcmlhYmxlcy5wcm9maWxlRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4vLyAgIGNvbnN0IHByb2ZpbGVVc2VySW5mbyA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbi8vICAgcHJvZmlsZVRpdGxlSW5wdXQudmFsdWUgPSBwcm9maWxlVXNlckluZm8udGl0bGU7XHJcbi8vICAgcHJvZmlsZURlc2NyaXB0aW9uSW5wdXQudmFsdWUgPSBwcm9maWxlVXNlckluZm8uZGVzY3JpcHRpb247XHJcbi8vICAgcHJvZmlsZUVkaXRGb3JtUG9wdXAub3BlbigpO1xyXG4vLyB9KTtcclxuXHJcbi8vIGFkZENhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4vLyBwcm9maWxlRWRpdEZvcm1Qb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gdmFyaWFibGVzLmFkZE5ld0NhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuLy8gICBjYXJkRm9ybVZhbGlkYXRvci50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4vLyAgIGFkZENhcmRQb3B1cC5vcGVuKCk7XHJcbi8vIH0pO1xyXG5cclxuLy8gQ3JlYXRlIGEgbmV3IGNhcmRcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZERhdGEpIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXHJcbiAgICBjYXJkRGF0YSxcclxuICAgIFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBoYW5kbGVEZWxldGVDbGljayxcclxuICAgIGhhbmRsZUxpa2VDbGlja1xyXG4gICk7XHJcbiAgc2VjdGlvbi5hZGRJdGVtKGNhcmQuZ2V0VmlldygpKTtcclxufVxyXG5cclxuc2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG4vLyBsZXQgc2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjYXJkc19fbGlzdFwiKTtcclxuY3JlYXRlQ2FyZChjYXJkRGF0YSk7XHJcblxyXG4vLyBPcGVuIHRoZSBhdmF0YXIgZm9ybVxyXG5mdW5jdGlvbiBvcGVuQXZhdGFyRm9ybSgpIHtcclxuICBhdmF0YXJNb2RhbC5vcGVuKCk7XHJcbn1cclxuXHJcbi8vIE9wZW4gdGhlIGFkZCBjYXJkIGZvcm1cclxuZnVuY3Rpb24gb3BlbkFkZENhcmRGb3JtKCkge1xyXG4gIGFkZENhcmRQb3B1cC5vcGVuKCk7XHJcbn1cclxuXHJcbi8vIE9wZW4gdGhlIHByb2ZpbGUgZWRpdCBmb3JtXHJcbmZ1bmN0aW9uIG9wZW5Qcm9maWxlRWRpdEZvcm0oKSB7XHJcbiAgY29uc3QgcHJvZmlsZVVzZXJJbmZvID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBwcm9maWxlVGl0bGVJbnB1dC52YWx1ZSA9IHByb2ZpbGVVc2VySW5mby50aXRsZTtcclxuICBwcm9maWxlRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHByb2ZpbGVVc2VySW5mby5kZXNjcmlwdGlvbjtcclxuICBwcm9maWxlRWRpdEZvcm1Qb3B1cC5vcGVuKCk7XHJcbn1cclxuXHJcbi8vIEV2ZW50IGxpc3RlbmVyc1xyXG52YXJpYWJsZXMucHJvZmlsZUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvcGVuQXZhdGFyRm9ybSk7XHJcbnZhcmlhYmxlcy5hZGROZXdDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvcGVuQWRkQ2FyZEZvcm0pO1xyXG52YXJpYWJsZXMucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9wZW5Qcm9maWxlRWRpdEZvcm0pO1xyXG5cclxuLy8gUG9wdXAgd2l0aCBpbWFnZVxyXG5jb25zdCBwb3B1cFdpdGhJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNtb2RhbC1wcmV2aWV3XCIpO1xyXG5wb3B1cFdpdGhJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gUG9wdXAgd2l0aCBkZWxldGVcclxuY29uc3QgZGVsZXRlTW9kYWwgPSBuZXcgUG9wdXBXaXRoRGVsZXRlKFwiI2RlbGV0ZS1tb2RhbFwiKTtcclxuZGVsZXRlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIFBvcHVwIHdpdGggZm9ybVxyXG5jb25zdCBhZGRDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNhZGQtY2FyZC1tb2RhbFwiLFxyXG4gIGhhbmRsZUFkZENhcmRGb3JtU3VibWl0XHJcbik7XHJcbmFkZENhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcHJvZmlsZUVkaXRGb3JtUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNwcm9maWxlLWVkaXQtbW9kYWxcIixcclxuICBoYW5kbGVQcm9maWxlRWRpdEZvcm1TdWJtaXRcclxuKTtcclxucHJvZmlsZUVkaXRGb3JtUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIEZ1bmN0aW9uc1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlSW1hZ2VDbGljayhjYXJkRGF0YSkge1xyXG4gIHBvcHVwV2l0aEltYWdlLm9wZW4oY2FyZERhdGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVDbGljayhjYXJkKSB7XHJcbiAgLy8gb3BlbiB0aGUgbW9kYWxcclxuICBkZWxldGVNb2RhbC5vcGVuKCk7XHJcbiAgLy8gc2V0IHRoZSBzdWJtaXQgYWN0aW9uXHJcbiAgZGVsZXRlTW9kYWwuc2V0U3VibWl0QWN0aW9uKCgpID0+IHtcclxuICAgIGFwaVxyXG4gICAgICAuZGVsZXRlQ2FyZChjYXJkLl9pZClcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGRlbGV0ZU1vZGFsLmNsb3NlKCk7XHJcbiAgICAgICAgY2FyZC5oYW5kbGVEZWxldGUoKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVMaWtlQ2xpY2soY2FyZCkge1xyXG4gIGFwaVxyXG4gICAgLnVwZGF0ZUxpa2UoY2FyZC5faWQsIGNhcmQuaXNMaWtlZCgpKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBjYXJkLmhhbmRsZUxpa2UoKTtcclxuICAgICAgY29uc29sZS5sb2coY2FyZCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVBdmF0YXJGb3JtU3VibWl0KGlucHV0VmFsdWVzKSB7XHJcbiAgc2V0QnV0dG9uVGV4dCh2YXJpYWJsZXMuYXZhdGFyTW9kYWxCdXR0b24sIFwiU2F2aW5nLi4uXCIpO1xyXG4gIGFwaVxyXG4gICAgLnVwZGF0ZUF2YXRhcihpbnB1dFZhbHVlcy5saW5rKVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICB1c2VySW5mby5zZXRBdmF0YXIocmVzLmF2YXRhcik7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgIGF2YXRhck1vZGFsLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgIHNldEJ1dHRvblRleHQodmFyaWFibGVzLmF2YXRhck1vZGFsQnV0dG9uLCBcIlNhdmVcIik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUVkaXRGb3JtU3VibWl0KGZvcm1EYXRhKSB7XHJcbiAgdXNlckluZm8uc2V0VXNlckluZm8oZm9ybURhdGEudGl0bGUsIGZvcm1EYXRhLmRlc2NyaXB0aW9uKTtcclxuICBwcm9maWxlRWRpdEZvcm1Qb3B1cC5jbG9zZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdChpbnB1dFZhbHVlcykge1xyXG4gIHNldEJ1dHRvblRleHQodmFyaWFibGVzLmFkZE5ld0NhcmRCdXR0b24sIFwiU2F2aW5nLi4uXCIpO1xyXG4gIGFwaVxyXG4gICAgLmFkZE5ld0NhcmQoaW5wdXRWYWx1ZXMpXHJcbiAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGNyZWF0ZUNhcmQocmVzKTtcclxuICAgICAgdmFyaWFibGVzLmFkZE5ld01vZGFsQ2FyZC5yZXNldCgpO1xyXG4gICAgICBjYXJkRm9ybVZhbGlkYXRvci50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICBhZGRDYXJkUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goY29uc29sZS5lcnJvcilcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgc2V0QnV0dG9uVGV4dCh2YXJpYWJsZXMuYWRkTmV3Q2FyZEJ1dHRvbiwgXCJTYXZlXCIpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIFJlbmRlciB0aGUgY2FyZCBzZWN0aW9uXHJcbmNhcmRTZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcblxyXG4vLyBFbmFibGUgdmFsaWRhdGlvbiBmb3IgdGhlIGVkaXQgZm9ybVxyXG5lZGl0Rm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4iXSwibmFtZXMiOlsiQ2FyZCIsIl9yZWYiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlRGVsZXRlQ2xpY2siLCJoYW5kbGVMaWtlSWNvbiIsIm5hbWUiLCJsaW5rIiwibGlrZXMiLCJvd25lciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJfbmFtZSIsIl9saW5rIiwiX2xpa2VzIiwiX293bmVyIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX2hhbmRsZURlbGV0ZUNsaWNrIiwiX2hhbmRsZUxpa2VJY29uIiwia2V5IiwidmFsdWUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjbG9uZU5vZGUiLCJfdGhpcyIsIl9jYXJkRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJyZW1vdmUiLCJfaXNMaWtlZCIsIl9saWtlQnV0dG9uIiwiYWRkIiwiX3RoaXMyIiwiX2dldFRlbXBsYXRlIiwiY2FyZEltYWdlRUwiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsImlzTGlrZWQiLCJzb21lIiwibGlrZSIsIl9pZCIsIl9zZXRFdmVudExpc3RlbmVycyIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtU2VsZWN0b3IiLCJ2YWxpZGF0aW9uU2V0dGluZ3MiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfZm9ybUVsIiwiX2lucHV0RWxzIiwicXVlcnlTZWxlY3RvckFsbCIsIl9zdWJtaXRCdXR0b25zIiwiaW5wdXRFbCIsInZhbGlkaXR5IiwidmFsaWQiLCJfc2hvd0lucHV0RXJyb3IiLCJfaGlkZUlucHV0RXJyb3IiLCJpbnB1dCIsImVycm9yTWVzc2FnZUVsIiwiY29uY2F0IiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImlucHV0TGlzdCIsImV2ZXJ5IiwiX2hhc0ludmFsaWRJbnB1dCIsImRpc2FibGVkIiwiZm9yRWFjaCIsImUiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidG9nZ2xlQnV0dG9uU3RhdGUiLCJwcmV2ZW50RGVmYXVsdCIsIlNlY3Rpb24iLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiaXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiY2xvc2UiLCJfcG9wdXBFbGVtZW50IiwiX2hhbmRsZUVzY0Nsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2dCIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoSW1hZ2UiLCJfUG9wdXAiLCJfaW5oZXJpdHMiLCJfc3VwZXIiLCJjYWxsIiwiX3BvcHVwSW1hZ2UiLCJfcG9wdXBUaXRsZSIsIl9nZXQiLCJfZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX3BvcHVwRm9ybSIsInJlc2V0IiwiaW5wdXRWYWx1ZXMiLCJpbnB1dHMiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJQb3B1cFdpdGhEZWxldGUiLCJVc2VySW5mbyIsInRpdGxlU2VsZWN0b3IiLCJkZXNjcmlwdGlvblNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfdGl0bGVFbCIsIl9kZXNjcmlwdGlvbkVsIiwiX2F2YXRhckVsIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImF2YXRhciIsIkFwaSIsIl9iYXNlVXJsIiwiX2hlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImZldGNoIiwiaGVhZGVycyIsInRoZW4iLCJfY2hlY2tSZXNwb25zZSIsImFib3V0IiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYXJkSWQiLCJhdmF0YXJVcmwiLCJ2YXJpYWJsZXMiLCJwcm9maWxlRWRpdEJ1dHRvbiIsInByb2ZpbGVFZGl0TW9kYWwiLCJwcm9maWxlVGl0bGVJbnB1dCIsInByb2ZpbGVEZXNjcmlwdGlvbklucHV0IiwicHJvZmlsZUltYWdlIiwiYWRkTmV3TW9kYWxDYXJkIiwiY2FyZExpc3RFbCIsImFkZE5ld0NhcmRCdXR0b24iLCJkZWxldGVNb2RhbCIsImF2YXRhcklucHV0IiwiYXZhdGFyTW9kYWwiLCJhdmF0YXJNb2RhbEJ1dHRvbiIsImFwaSIsImJhc2VVcmwiLCJ1c2VySW5mbyIsImdldEluaXRpYWxDYXJkcyIsInNlY3Rpb24iLCJjYXJkRGF0YSIsImNyZWF0ZUNhcmQiLCJyZW5kZXJJdGVtcyIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVycm9yIiwiY2FyZEZvcm1WYWxpZGF0b3IiLCJlbmFibGVWYWxpZGF0aW9uIiwiZWRpdEZvcm1WYWxpZGF0b3IiLCJhZGRJdGVtIiwic2V0QnV0dG9uVGV4dCIsInVwZGF0ZUF2YXRhciIsInNldEF2YXRhciIsImZpbmFsbHkiLCJjYXJkIiwiaGFuZGxlTGlrZUNsaWNrIiwiZ2V0VmlldyIsInNldEV2ZW50TGlzdGVuZXJzIiwib3BlbiIsImFkZENhcmRQb3B1cCIsInByb2ZpbGVVc2VySW5mbyIsImdldFVzZXJJbmZvIiwicHJvZmlsZUVkaXRGb3JtUG9wdXAiLCJwb3B1cFdpdGhJbWFnZSIsImFkZE5ld0NhcmQiLCJmb3JtRGF0YSIsInNldFVzZXJJbmZvIiwic2V0U3VibWl0QWN0aW9uIiwiZGVsZXRlQ2FyZCIsImhhbmRsZURlbGV0ZSIsInVwZGF0ZUxpa2UiLCJoYW5kbGVMaWtlIiwiY2FyZFNlY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9